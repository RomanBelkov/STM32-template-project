
demo.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001ac l    d  .text	00000000 .text
08002164 l    d  .rodata	00000000 .rodata
08003690 l    d  .init_array	00000000 .init_array
08003698 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000854 l    d  .bss	00000000 .bss
20000908 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 C:\Users\RB\AppData\Local\Temp\ccpJDMjC.o
080003a0 l       .text	00000000 LoopCopyDataInit
08000398 l       .text	00000000 CopyDataInit
080003b4 l       .text	00000000 LoopFillZerobss
080003ae l       .text	00000000 FillZerobss
080003e0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800214c l     O .text	00000000 __EH_FRAME_BEGIN__
080001ac l     F .text	00000000 __do_global_dtors_aux
20000854 l       .bss	00000000 completed.8605
08003698 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001d0 l     F .text	00000000 frame_dummy
20000858 l       .bss	00000000 object.8610
08003694 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08000258 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 syscalls.c
20000870 l     O .bss	00000004 heap_end.6203
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tm_stm32f4_ili9341_ltdc.c
080005e8 l     F .text	00000040 TM_SPI_Send.constprop.1
00000000 l    df *ABS*	00000000 tm_stm32f4_sdram.c
20000874 l     O .bss	00000001 initialized.8203
00000000 l    df *ABS*	00000000 tm_stm32f4_delay.c
20000878 l     O .bss	00000018 CustomTimers
00000000 l    df *ABS*	00000000 tm_stm32f4_gpio.c
2000089c l     O .bss	00000016 GPIO_UsedPins
00000000 l    df *ABS*	00000000 tm_stm32f4_spi.c
080013c8 l     F .text	0000013c TM_SPIx_Init
00000000 l    df *ABS*	00000000 stm32f4xx_spi.c
00000000 l    df *ABS*	00000000 stm32f4xx_ltdc.c
00000000 l    df *ABS*	00000000 stm32f4xx_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_fmc.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 c:/program files (x86)/gnu tools arm embedded/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/softfp/crti.o
00000000 l    df *ABS*	00000000 c:/program files (x86)/gnu tools arm embedded/5.4 2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/softfp/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 tm_stm32f4_fonts.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0800369c l       .fini_array	00000000 __fini_array_end
20000854 l       .bss	00000000 __bss_start__
20000908 l       .bss	00000000 __bss_end__
08003698 l       .fini_array	00000000 __fini_array_start
08003698 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 __end__
08003690 l       .init_array	00000000 __preinit_array_end
08003690 l       .init_array	00000000 __init_array_start
08003690 l       .init_array	00000000 __preinit_array_start
080003e0  w    F .text	00000002 RTC_Alarm_IRQHandler
08000790 g     F .text	000000b8 TM_ILI9341_InitLayers
080003e0  w    F .text	00000002 HASH_RNG_IRQHandler
080003e0  w    F .text	00000002 EXTI2_IRQHandler
080003e0  w    F .text	00000002 TIM8_CC_IRQHandler
0800050c g     F .text	00000002 DebugMon_Handler
080003e0  w    F .text	00000002 UART8_IRQHandler
080003e0  w    F .text	00000002 SPI4_IRQHandler
20000898 g     O .bss	00000004 TM_Time2
080003e0  w    F .text	00000002 TIM1_CC_IRQHandler
080003e0  w    F .text	00000002 DMA2_Stream5_IRQHandler
08000502 g     F .text	00000002 HardFault_Handler
08001390 g     F .text	00000038 TM_SPI6_INT_InitPins
080003e0  w    F .text	00000002 DMA1_Stream5_IRQHandler
08001eb8 g     F .text	00000002 __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08000510 g     F .text	00000008 SysTick_Handler
08000d84  w    F .text	00000004 TM_SDRAM_InitCustomPinsCallback
080003e0  w    F .text	00000002 PVD_IRQHandler
080003e0  w    F .text	00000002 SDIO_IRQHandler
080003e0  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800369c g       *ABS*	00000000 _sidata
08000ff0 g     F .text	00000054 TM_DELAY_Init
0800050e g     F .text	00000002 PendSV_Handler
08000500 g     F .text	00000002 NMI_Handler
08003690 g       .init_array	00000000 __exidx_end
080003e0  w    F .text	00000002 CAN2_RX1_IRQHandler
080003e0  w    F .text	00000002 EXTI3_IRQHandler
080012e4 g     F .text	0000004c TM_SPI4_INT_InitPins
08001928 g     F .text	0000000c __errno
08001760 g     F .text	00000018 RCC_PLLSAIConfig
080003e0  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
080003e0  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
20000904 g     O .bss	00000004 errno
08002164 g       .text	00000000 _etext
20000854 g       .bss	00000000 _sbss
08000868 g     F .text	00000020 TM_ILI9341_SendData
00000000  w      *UND*	00000000 TM_DELAY_1msHandler
08000848 g     F .text	00000020 TM_ILI9341_SendCommand
080003e0  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
080003e0  w    F .text	00000002 I2C3_ER_IRQHandler
2000042c g     O .data	00000004 __heap_limit
08001504 g     F .text	0000007c TM_SPI_Init
08001778 g     F .text	0000000c RCC_PLLSAICmd
080018b8 g     F .text	00000020 FMC_SDRAMCmdConfig
08001330 g     F .text	00000060 TM_SPI5_INT_InitPins
080003e0  w    F .text	00000002 EXTI0_IRQHandler
080003e0  w    F .text	00000002 I2C2_EV_IRQHandler
080003e0  w    F .text	00000002 DMA1_Stream2_IRQHandler
080003e0  w    F .text	00000002 CAN1_RX0_IRQHandler
0800168c g     F .text	00000018 LTDC_DitherCmd
080003e0  w    F .text	00000002 FPU_IRQHandler
20000430 g     O .data	00000004 SystemCoreClock
080003e0  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08001934 g     F .text	00000010 malloc
08000508 g     F .text	00000002 UsageFault_Handler
080003e0  w    F .text	00000002 LTDC_ER_IRQHandler
080003e0  w    F .text	00000002 CAN2_SCE_IRQHandler
200008bc g     O .bss	00000004 __malloc_top_pad
080003e0  w    F .text	00000002 DMA2_Stream2_IRQHandler
08001128 g     F .text	00000036 TM_GPIO_Init
08000bf8 g     F .text	00000080 TM_ILI9341_Init
20000000 g       .data	00000000 _sdata
080003e0  w    F .text	00000002 SPI1_IRQHandler
200008e8 g     O .bss	00000002 ILI9341_x
08001ebc g     F .text	00000024 _sbrk_r
080003e0  w    F .text	00000002 TIM6_DAC_IRQHandler
080003e0  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
080003e0  w    F .text	00000002 DCMI_IRQHandler
080003e0  w    F .text	00000002 CAN2_RX0_IRQHandler
080018d8 g     F .text	00000010 FMC_SetRefreshCount
200008b8 g     O .bss	00000004 __malloc_max_sbrked_mem
08000d10 g     F .text	00000074 TM_ILI9341_Puts
08003690 g       .init_array	00000000 __exidx_start
080003e0  w    F .text	00000002 DMA2_Stream3_IRQHandler
08002164 g     O .rodata	00000004 _global_impure_ptr
08000208 g     F .text	00000050 __libc_init_array
08001784 g     F .text	00000018 RCC_LTDCCLKDivConfig
08000344  w    F .text	0000004c _sbrk
080003e0  w    F .text	00000002 USART6_IRQHandler
0800214c g     F .text	00000000 _init
08001674 g     F .text	00000018 LTDC_Cmd
080003e0  w    F .text	00000002 USART3_IRQHandler
08000278 g     F .text	00000028 __libc_fini_array
20000908 g       .bss	00000000 _ebss
0800115e g     F .text	00000066 TM_GPIO_InitAlternate
08000390  w    F .text	00000038 Reset_Handler
080003e0  w    F .text	00000002 CAN1_RX1_IRQHandler
080003e0  w    F .text	00000002 UART5_IRQHandler
0800179c g     F .text	00000028 RCC_GetFlagStatus
080003e0  w    F .text	00000002 DMA2_Stream0_IRQHandler
080003e0  w    F .text	00000002 TIM4_IRQHandler
08001294 g     F .text	00000050 TM_SPI3_INT_InitPins
08000be4 g     F .text	00000014 TM_ILI9341_SetLayer2
00000000  w      *UND*	00000000 __deregister_frame_info
20000908 g       ._user_heap_stack	00000000 end
080003e0  w    F .text	00000002 I2C1_EV_IRQHandler
080003e0  w    F .text	00000002 DMA1_Stream6_IRQHandler
080008e4 g     F .text	00000020 TM_ILI9341_Fill
080003e0  w    F .text	00000002 DMA1_Stream1_IRQHandler
080003e0  w    F .text	00000002 UART4_IRQHandler
08000bac g     F .text	00000028 TM_ILI9341_Rotate
080018e8 g     F .text	00000040 FMC_GetFlagStatus
08001f7c g     F .text	000001d0 _free_r
080003e0  w    F .text	00000002 TIM3_IRQHandler
080003e0  w    F .text	00000002 RCC_IRQHandler
080003e0  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
00000200 g       *ABS*	00000000 _Min_Heap_Size
080011c8 g     F .text	00000050 TM_SPI1_INT_InitPins
080003e0 g       .text	00000002 Default_Handler
20000850 g     O .data	00000004 __malloc_sbrk_base
080003e0  w    F .text	00000002 EXTI15_10_IRQHandler
080002a0 g     F .text	000000a4 __register_exitproc
080003e0  w    F .text	00000002 ADC_IRQHandler
200008ec g     O .bss	00000010 ILI9341_Opts
20000890 g     O .bss	00000001 TM_DELAY_Initialized
200008c0 g     O .bss	00000028 __malloc_current_mallinfo
080003e0  w    F .text	00000002 DMA1_Stream7_IRQHandler
080003e0  w    F .text	00000002 SPI5_IRQHandler
080003e0  w    F .text	00000002 TIM7_IRQHandler
080003e0  w    F .text	00000002 CAN2_TX_IRQHandler
080003e0  w    F .text	00000002 TIM5_IRQHandler
080003e0  w    F .text	00000002 DMA2_Stream7_IRQHandler
080003e0  w    F .text	00000002 I2C3_EV_IRQHandler
080003e0  w    F .text	00000002 EXTI9_5_IRQHandler
20000434 g     O .data	00000008 TM_Font_7x10
080003e0  w    F .text	00000002 RTC_WKUP_IRQHandler
20000444 g     O .data	00000408 __malloc_av_
080003e0  w    F .text	00000002 LTDC_IRQHandler
080003e0  w    F .text	00000002 ETH_WKUP_IRQHandler
08001eb4 g     F .text	00000002 __malloc_lock
080003e0  w    F .text	00000002 SPI2_IRQHandler
080011c4  w    F .text	00000002 TM_SPI_InitCustomPinsCallback
080003e0  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08000504 g     F .text	00000002 MemManage_Handler
08000518 g     F .text	000000d0 main
08000628 g     F .text	000000e8 TM_ILI9341_InitPins
200008b4 g     O .bss	00000004 __malloc_max_total_mem
080003e0  w    F .text	00000002 DMA1_Stream0_IRQHandler
08003ef0 g       *ABS*	00000000 _siccmram
080003e0  w    F .text	00000002 CAN1_TX_IRQHandler
0800050a g     F .text	00000002 SVC_Handler
08002932 g     O .rodata	00000d5c TM_Font11x18
08001944 g     F .text	00000570 _malloc_r
08000918 g     F .text	00000294 TM_ILI9341_InitLCD
080016b0 g     F .text	0000009a LTDC_LayerInit
00000000  w      *UND*	00000000 __libc_fini
08001044 g     F .text	00000020 TM_GPIO_INT_EnableClock
080016a4 g     F .text	0000000c LTDC_ReloadConfig
080003e0  w    F .text	00000002 EXTI4_IRQHandler
08001ee0 g     F .text	0000009c _malloc_trim_r
20000894 g     O .bss	00000004 TM_Time
080003e4 g     F .text	0000011c SystemInit
08002158 g     F .text	00000000 _fini
08000888 g     F .text	0000005c TM_ILI9341_DrawPixel
08001218 g     F .text	0000007c TM_SPI2_INT_InitPins
0800026c g     F .text	0000000c atexit
10000000 g       .ccmram	00000000 _eccmram
080003e0  w    F .text	00000002 ETH_IRQHandler
20000428 g     O .data	00000004 _impure_ptr
080003e0  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
080003e0  w    F .text	00000002 WWDG_IRQHandler
080003e0  w    F .text	00000002 SPI6_IRQHandler
080021c6 g     O .rodata	0000076c TM_Font7x10
200008fc g     O .bss	00000002 ILI9341_y
080003e0  w    F .text	00000002 TIM2_IRQHandler
080003e0  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
080003e0  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
080003e0  w    F .text	00000002 OTG_HS_IRQHandler
080003e0  w    F .text	00000002 DMA2D_IRQHandler
20030000 g       *ABS*	00000000 _estack
08000c78 g     F .text	00000098 TM_ILI9341_Putc
080003e0  w    F .text	00000002 EXTI1_IRQHandler
08000904 g     F .text	00000014 TM_ILI9341_Delay
080015d8 g     F .text	0000009c LTDC_Init
20000854 g       .data	00000000 _edata
0800174a g     F .text	00000012 LTDC_LayerCmd
10000000 g       .ccmram	00000000 _sccmram
20000900 g     O .bss	00000004 mult
080003e0  w    F .text	00000002 UART7_IRQHandler
08000d88 g     F .text	00000208 TM_SDRAM_Init
080003e0  w    F .text	00000002 USART2_IRQHandler
2000084c g     O .data	00000004 __malloc_trim_threshold
0800175c g     F .text	00000004 LTDC_LayerAlpha
08000000 g     O .isr_vector	00000000 g_pfnVectors
08001064 g     F .text	000000c4 TM_GPIO_INT_Init
080003e0  w    F .text	00000002 I2C2_ER_IRQHandler
080003e0  w    F .text	00000002 DMA2_Stream1_IRQHandler
08000f90 g     F .text	00000060 TimingDelay_Decrement
080003e0  w    F .text	00000002 CAN1_SCE_IRQHandler
080003e0  w    F .text	00000002 FLASH_IRQHandler
080003e0  w    F .text	00000002 DMA2_Stream4_IRQHandler
08000506 g     F .text	00000002 BusFault_Handler
080003e0  w    F .text	00000002 USART1_IRQHandler
08000bd4 g     F .text	00000010 TM_ILI9341_SetLayer1
080003e0  w    F .text	00000002 OTG_FS_IRQHandler
080003e0  w    F .text	00000002 SPI3_IRQHandler
080003e0  w    F .text	00000002 DMA1_Stream4_IRQHandler
08000710 g     F .text	00000080 TM_LCD9341_InitLTDC
080003e0  w    F .text	00000002 I2C1_ER_IRQHandler
080003e0  w    F .text	00000002 FMC_IRQHandler
080015be g     F .text	00000018 SPI_StructInit
08001580 g     F .text	0000003e SPI_Init
2000043c g     O .data	00000008 TM_Font_11x18
00000000  w      *UND*	00000000 _Jv_RegisterClasses
080017c4 g     F .text	000000f4 FMC_SDRAMInit
00000000  w      *UND*	00000000 __register_frame_info
080003e0  w    F .text	00000002 DMA2_Stream6_IRQHandler
080003e0  w    F .text	00000002 SAI1_IRQHandler
080003e0  w    F .text	00000002 DMA1_Stream3_IRQHandler



Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000854 	.word	0x20000854
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800214c 	.word	0x0800214c

080001d0 <frame_dummy>:
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <frame_dummy+0x24>)
 80001d2:	b510      	push	{r4, lr}
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <frame_dummy+0x28>)
 80001d8:	4808      	ldr	r0, [pc, #32]	; (80001fc <frame_dummy+0x2c>)
 80001da:	f3af 8000 	nop.w
 80001de:	4808      	ldr	r0, [pc, #32]	; (8000200 <frame_dummy+0x30>)
 80001e0:	6803      	ldr	r3, [r0, #0]
 80001e2:	b903      	cbnz	r3, 80001e6 <frame_dummy+0x16>
 80001e4:	bd10      	pop	{r4, pc}
 80001e6:	4b07      	ldr	r3, [pc, #28]	; (8000204 <frame_dummy+0x34>)
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d0fb      	beq.n	80001e4 <frame_dummy+0x14>
 80001ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001f0:	4718      	bx	r3
 80001f2:	bf00      	nop
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000858 	.word	0x20000858
 80001fc:	0800214c 	.word	0x0800214c
 8000200:	20000854 	.word	0x20000854
 8000204:	00000000 	.word	0x00000000

08000208 <__libc_init_array>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	4e0f      	ldr	r6, [pc, #60]	; (8000248 <__libc_init_array+0x40>)
 800020c:	4d0f      	ldr	r5, [pc, #60]	; (800024c <__libc_init_array+0x44>)
 800020e:	1b76      	subs	r6, r6, r5
 8000210:	10b6      	asrs	r6, r6, #2
 8000212:	bf18      	it	ne
 8000214:	2400      	movne	r4, #0
 8000216:	d005      	beq.n	8000224 <__libc_init_array+0x1c>
 8000218:	3401      	adds	r4, #1
 800021a:	f855 3b04 	ldr.w	r3, [r5], #4
 800021e:	4798      	blx	r3
 8000220:	42a6      	cmp	r6, r4
 8000222:	d1f9      	bne.n	8000218 <__libc_init_array+0x10>
 8000224:	4e0a      	ldr	r6, [pc, #40]	; (8000250 <__libc_init_array+0x48>)
 8000226:	4d0b      	ldr	r5, [pc, #44]	; (8000254 <__libc_init_array+0x4c>)
 8000228:	1b76      	subs	r6, r6, r5
 800022a:	f001 ff8f 	bl	800214c <_init>
 800022e:	10b6      	asrs	r6, r6, #2
 8000230:	bf18      	it	ne
 8000232:	2400      	movne	r4, #0
 8000234:	d006      	beq.n	8000244 <__libc_init_array+0x3c>
 8000236:	3401      	adds	r4, #1
 8000238:	f855 3b04 	ldr.w	r3, [r5], #4
 800023c:	4798      	blx	r3
 800023e:	42a6      	cmp	r6, r4
 8000240:	d1f9      	bne.n	8000236 <__libc_init_array+0x2e>
 8000242:	bd70      	pop	{r4, r5, r6, pc}
 8000244:	bd70      	pop	{r4, r5, r6, pc}
 8000246:	bf00      	nop
 8000248:	08003690 	.word	0x08003690
 800024c:	08003690 	.word	0x08003690
 8000250:	08003698 	.word	0x08003698
 8000254:	08003690 	.word	0x08003690

08000258 <register_fini>:
 8000258:	4b02      	ldr	r3, [pc, #8]	; (8000264 <register_fini+0xc>)
 800025a:	b113      	cbz	r3, 8000262 <register_fini+0xa>
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <register_fini+0x10>)
 800025e:	f000 b805 	b.w	800026c <atexit>
 8000262:	4770      	bx	lr
 8000264:	00000000 	.word	0x00000000
 8000268:	08000279 	.word	0x08000279

0800026c <atexit>:
 800026c:	2300      	movs	r3, #0
 800026e:	4601      	mov	r1, r0
 8000270:	461a      	mov	r2, r3
 8000272:	4618      	mov	r0, r3
 8000274:	f000 b814 	b.w	80002a0 <__register_exitproc>

08000278 <__libc_fini_array>:
 8000278:	b538      	push	{r3, r4, r5, lr}
 800027a:	4d07      	ldr	r5, [pc, #28]	; (8000298 <__libc_fini_array+0x20>)
 800027c:	4c07      	ldr	r4, [pc, #28]	; (800029c <__libc_fini_array+0x24>)
 800027e:	1b2c      	subs	r4, r5, r4
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	d005      	beq.n	8000290 <__libc_fini_array+0x18>
 8000284:	3c01      	subs	r4, #1
 8000286:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800028a:	4798      	blx	r3
 800028c:	2c00      	cmp	r4, #0
 800028e:	d1f9      	bne.n	8000284 <__libc_fini_array+0xc>
 8000290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000294:	f001 bf60 	b.w	8002158 <_fini>
 8000298:	0800369c 	.word	0x0800369c
 800029c:	08003698 	.word	0x08003698

080002a0 <__register_exitproc>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	4c25      	ldr	r4, [pc, #148]	; (800033c <__register_exitproc+0x9c>)
 80002a6:	6825      	ldr	r5, [r4, #0]
 80002a8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80002ac:	4606      	mov	r6, r0
 80002ae:	4688      	mov	r8, r1
 80002b0:	4692      	mov	sl, r2
 80002b2:	4699      	mov	r9, r3
 80002b4:	b3c4      	cbz	r4, 8000328 <__register_exitproc+0x88>
 80002b6:	6860      	ldr	r0, [r4, #4]
 80002b8:	281f      	cmp	r0, #31
 80002ba:	dc17      	bgt.n	80002ec <__register_exitproc+0x4c>
 80002bc:	1c43      	adds	r3, r0, #1
 80002be:	b176      	cbz	r6, 80002de <__register_exitproc+0x3e>
 80002c0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80002c4:	2201      	movs	r2, #1
 80002c6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80002ca:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80002ce:	4082      	lsls	r2, r0
 80002d0:	4311      	orrs	r1, r2
 80002d2:	2e02      	cmp	r6, #2
 80002d4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80002d8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80002dc:	d01e      	beq.n	800031c <__register_exitproc+0x7c>
 80002de:	3002      	adds	r0, #2
 80002e0:	6063      	str	r3, [r4, #4]
 80002e2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80002e6:	2000      	movs	r0, #0
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <__register_exitproc+0xa0>)
 80002ee:	b303      	cbz	r3, 8000332 <__register_exitproc+0x92>
 80002f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80002f4:	f001 fb1e 	bl	8001934 <malloc>
 80002f8:	4604      	mov	r4, r0
 80002fa:	b1d0      	cbz	r0, 8000332 <__register_exitproc+0x92>
 80002fc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8000300:	2700      	movs	r7, #0
 8000302:	e880 0088 	stmia.w	r0, {r3, r7}
 8000306:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800030a:	4638      	mov	r0, r7
 800030c:	2301      	movs	r3, #1
 800030e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 8000312:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8000316:	2e00      	cmp	r6, #0
 8000318:	d0e1      	beq.n	80002de <__register_exitproc+0x3e>
 800031a:	e7d1      	b.n	80002c0 <__register_exitproc+0x20>
 800031c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8000320:	430a      	orrs	r2, r1
 8000322:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000326:	e7da      	b.n	80002de <__register_exitproc+0x3e>
 8000328:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 800032c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000330:	e7c1      	b.n	80002b6 <__register_exitproc+0x16>
 8000332:	f04f 30ff 	mov.w	r0, #4294967295
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	bf00      	nop
 800033c:	08002164 	.word	0x08002164
 8000340:	08001935 	.word	0x08001935

08000344 <_sbrk>:
 8000344:	4a0e      	ldr	r2, [pc, #56]	; (8000380 <_sbrk+0x3c>)
 8000346:	6813      	ldr	r3, [r2, #0]
 8000348:	b510      	push	{r4, lr}
 800034a:	b1ab      	cbz	r3, 8000378 <_sbrk+0x34>
 800034c:	4418      	add	r0, r3
 800034e:	4669      	mov	r1, sp
 8000350:	4288      	cmp	r0, r1
 8000352:	d809      	bhi.n	8000368 <_sbrk+0x24>
 8000354:	490b      	ldr	r1, [pc, #44]	; (8000384 <_sbrk+0x40>)
 8000356:	4c0c      	ldr	r4, [pc, #48]	; (8000388 <_sbrk+0x44>)
 8000358:	6809      	ldr	r1, [r1, #0]
 800035a:	42a1      	cmp	r1, r4
 800035c:	d001      	beq.n	8000362 <_sbrk+0x1e>
 800035e:	4288      	cmp	r0, r1
 8000360:	d802      	bhi.n	8000368 <_sbrk+0x24>
 8000362:	6010      	str	r0, [r2, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	bd10      	pop	{r4, pc}
 8000368:	f001 fade 	bl	8001928 <__errno>
 800036c:	230c      	movs	r3, #12
 800036e:	6003      	str	r3, [r0, #0]
 8000370:	f04f 33ff 	mov.w	r3, #4294967295
 8000374:	4618      	mov	r0, r3
 8000376:	bd10      	pop	{r4, pc}
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <_sbrk+0x48>)
 800037a:	6013      	str	r3, [r2, #0]
 800037c:	e7e6      	b.n	800034c <_sbrk+0x8>
 800037e:	bf00      	nop
 8000380:	20000870 	.word	0x20000870
 8000384:	2000042c 	.word	0x2000042c
 8000388:	cafedead 	.word	0xcafedead
 800038c:	20000908 	.word	0x20000908

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
  ldr  r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ba:	f000 f813 	bl	80003e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f7ff ff23 	bl	8000208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f000 f8a9 	bl	8000518 <main>
  bx  lr    
 80003c6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80003c8:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003cc:	0800369c 	.word	0x0800369c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003d4:	20000854 	.word	0x20000854
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003d8:	20000854 	.word	0x20000854
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003dc:	20000908 	.word	0x20000908

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e4:	4a40      	ldr	r2, [pc, #256]	; (80004e8 <SystemInit+0x104>)
 80003e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80003ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f2:	4b3e      	ldr	r3, [pc, #248]	; (80004ec <SystemInit+0x108>)
 80003f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f6:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f8:	f042 0201 	orr.w	r2, r2, #1
 80003fc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003fe:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000406:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800040a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800040c:	4a38      	ldr	r2, [pc, #224]	; (80004f0 <SystemInit+0x10c>)
 800040e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000410:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000412:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000414:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000418:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800041a:	60d9      	str	r1, [r3, #12]
{
#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800041c:	9100      	str	r1, [sp, #0]
 800041e:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000426:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800042e:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 8000430:	9a00      	ldr	r2, [sp, #0]
 8000432:	3201      	adds	r2, #1
 8000434:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000436:	9a01      	ldr	r2, [sp, #4]
 8000438:	b91a      	cbnz	r2, 8000442 <SystemInit+0x5e>
 800043a:	9a00      	ldr	r2, [sp, #0]
 800043c:	f5b2 4fa0 	cmp.w	r2, #20480	; 0x5000
 8000440:	d1f2      	bne.n	8000428 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <SystemInit+0x108>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800044a:	bf18      	it	ne
 800044c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800044e:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000450:	9b01      	ldr	r3, [sp, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d005      	beq.n	8000462 <SystemInit+0x7e>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000456:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <SystemInit+0x104>)
 8000458:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800045c:	609a      	str	r2, [r3, #8]
#endif
}
 800045e:	b002      	add	sp, #8
 8000460:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <SystemInit+0x108>)
 8000464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000466:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800046a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800046c:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <SystemInit+0x110>)
 800046e:	6811      	ldr	r1, [r2, #0]
 8000470:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000474:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000476:	6899      	ldr	r1, [r3, #8]
 8000478:	6099      	str	r1, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800047a:	6899      	ldr	r1, [r3, #8]
 800047c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000480:	6099      	str	r1, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000482:	6899      	ldr	r1, [r3, #8]
 8000484:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400
 8000488:	6099      	str	r1, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800048a:	491b      	ldr	r1, [pc, #108]	; (80004f8 <SystemInit+0x114>)
 800048c:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800048e:	6819      	ldr	r1, [r3, #0]
 8000490:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000494:	6019      	str	r1, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000496:	6819      	ldr	r1, [r3, #0]
 8000498:	0189      	lsls	r1, r1, #6
 800049a:	d5fc      	bpl.n	8000496 <SystemInit+0xb2>
    {
    }
   
#if defined (STM32F427_437xx) || defined (STM32F429_439xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 800049c:	6813      	ldr	r3, [r2, #0]
 800049e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004a2:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80004a4:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <SystemInit+0x110>)
 80004a6:	6853      	ldr	r3, [r2, #4]
 80004a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <SystemInit+0x110>)
 80004ae:	d0fa      	beq.n	80004a6 <SystemInit+0xc2>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004b6:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	0392      	lsls	r2, r2, #14
 80004bc:	d5fc      	bpl.n	80004b8 <SystemInit+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <SystemInit+0x118>)
 80004c0:	f240 7205 	movw	r2, #1797	; 0x705
 80004c4:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004c6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80004ca:	689a      	ldr	r2, [r3, #8]
 80004cc:	f022 0203 	bic.w	r2, r2, #3
 80004d0:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004d2:	689a      	ldr	r2, [r3, #8]
 80004d4:	f042 0202 	orr.w	r2, r2, #2
 80004d8:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80004da:	689a      	ldr	r2, [r3, #8]
 80004dc:	f002 020c 	and.w	r2, r2, #12
 80004e0:	2a08      	cmp	r2, #8
 80004e2:	d1fa      	bne.n	80004da <SystemInit+0xf6>
 80004e4:	e7b7      	b.n	8000456 <SystemInit+0x72>
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	40023800 	.word	0x40023800
 80004f0:	24003010 	.word	0x24003010
 80004f4:	40007000 	.word	0x40007000
 80004f8:	07405a08 	.word	0x07405a08
 80004fc:	40023c00 	.word	0x40023c00

08000500 <NMI_Handler>:
 8000500:	4770      	bx	lr

08000502 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler>

08000504 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler>

08000506 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler>

08000508 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000508:	e7fe      	b.n	8000508 <UsageFault_Handler>

0800050a <SVC_Handler>:
 800050a:	4770      	bx	lr

0800050c <DebugMon_Handler>:
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800050e:	4770      	bx	lr

08000510 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000510:	b508      	push	{r3, lr}
	TimingDelay_Decrement();
 8000512:	f000 fd3d 	bl	8000f90 <TimingDelay_Decrement>
 8000516:	bd08      	pop	{r3, pc}

08000518 <main>:
#include "tm_stm32f4_fonts.h"
#include "tm_stm32f4_delay.h"
#include "tm_stm32f4_disco.h"
#include <stdio.h>

int main(void) {
 8000518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Initialize system */
	SystemInit();
 800051a:	f7ff ff63 	bl	80003e4 <SystemInit>
	
	/* Initialize delay */
	TM_DELAY_Init();
 800051e:	f000 fd67 	bl	8000ff0 <TM_DELAY_Init>
	
	/* Initialize ILI9341 with LTDC */
	/* By default layer 1 is used */
	TM_ILI9341_Init();
 8000522:	f000 fb69 	bl	8000bf8 <TM_ILI9341_Init>
	
	/* Rotate LCD for 90 degrees */
	TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_2);
 8000526:	2003      	movs	r0, #3
 8000528:	f000 fb40 	bl	8000bac <TM_ILI9341_Rotate>
	
	/* Fill screen on layer 1 */
	TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
	
	/* Show text */
	TM_ILI9341_Puts(65, 30, "Layer 1", &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800052c:	2400      	movs	r4, #0
	
	/* Rotate LCD for 90 degrees */
	TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_2);
	
	/* Go to layer 1 */
	TM_ILI9341_SetLayer1();
 800052e:	f000 fb51 	bl	8000bd4 <TM_ILI9341_SetLayer1>
	
	/* Fill screen on layer 1 */
	TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
	
	/* Show text */
	TM_ILI9341_Puts(65, 30, "Layer 1", &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8000532:	f240 551d 	movw	r5, #1309	; 0x51d
	
	/* Go to layer 1 */
	TM_ILI9341_SetLayer1();
	
	/* Fill screen on layer 1 */
	TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
 8000536:	201f      	movs	r0, #31
 8000538:	f000 f9d4 	bl	80008e4 <TM_ILI9341_Fill>
	
	/* Show text */
	TM_ILI9341_Puts(65, 30, "Layer 1", &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <main+0xac>)
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <main+0xb0>)
 8000540:	211e      	movs	r1, #30
 8000542:	2041      	movs	r0, #65	; 0x41
 8000544:	e88d 0030 	stmia.w	sp, {r4, r5}
 8000548:	f000 fbe2 	bl	8000d10 <TM_ILI9341_Puts>
	TM_ILI9341_Puts(20, 130, "STM32F429 Discovery ONLY!", &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <main+0xac>)
 800054e:	4a1f      	ldr	r2, [pc, #124]	; (80005cc <main+0xb4>)
 8000550:	2182      	movs	r1, #130	; 0x82
 8000552:	2014      	movs	r0, #20
 8000554:	e88d 0030 	stmia.w	sp, {r4, r5}
 8000558:	f000 fbda 	bl	8000d10 <TM_ILI9341_Puts>
	TM_ILI9341_Puts(60, 150, "ILI9341 LCD Module", &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <main+0xac>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <main+0xb8>)
 8000560:	2196      	movs	r1, #150	; 0x96
 8000562:	203c      	movs	r0, #60	; 0x3c
 8000564:	e88d 0030 	stmia.w	sp, {r4, r5}
 8000568:	f000 fbd2 	bl	8000d10 <TM_ILI9341_Puts>
	TM_ILI9341_Puts(70, 170, "with LTDC support", &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <main+0xac>)
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <main+0xbc>)
 8000570:	21aa      	movs	r1, #170	; 0xaa
 8000572:	2046      	movs	r0, #70	; 0x46
 8000574:	e88d 0030 	stmia.w	sp, {r4, r5}
 8000578:	f000 fbca 	bl	8000d10 <TM_ILI9341_Puts>
	TM_ILI9341_Puts(170, 230, "stm32f4-discovery.com", &TM_Font_7x10, ILI9341_COLOR_BLACK, ILI9341_COLOR_ORANGE);
 800057c:	f64f 33e4 	movw	r3, #64484	; 0xfbe4
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <main+0xc0>)
 8000584:	9400      	str	r4, [sp, #0]
 8000586:	21e6      	movs	r1, #230	; 0xe6
 8000588:	20aa      	movs	r0, #170	; 0xaa
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <main+0xc4>)
 800058c:	f000 fbc0 	bl	8000d10 <TM_ILI9341_Puts>
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
	volatile uint32_t timer = TM_Time;
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <main+0xc8>)
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8000592:	4814      	ldr	r0, [pc, #80]	; (80005e4 <main+0xcc>)
 8000594:	4611      	mov	r1, r2
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
	volatile uint32_t timer = TM_Time;
 8000596:	6813      	ldr	r3, [r2, #0]
 8000598:	9303      	str	r3, [sp, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800059a:	f3ef 8305 	mrs	r3, IPSR

	/* Called from thread */
	if (!__get_IPSR()) {
 800059e:	b113      	cbz	r3, 80005a6 <main+0x8e>
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	e006      	b.n	80005b4 <main+0x9c>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 80005a6:	680b      	ldr	r3, [r1, #0]
 80005a8:	9c03      	ldr	r4, [sp, #12]
 80005aa:	1b1b      	subs	r3, r3, r4
 80005ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b0:	d3f9      	bcc.n	80005a6 <main+0x8e>
 80005b2:	e7f0      	b.n	8000596 <main+0x7e>
			__WFI();
#endif
		}
	} else {
		/* Called from interrupt */
		while (millis) {
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0ee      	beq.n	8000596 <main+0x7e>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80005b8:	6804      	ldr	r4, [r0, #0]
 80005ba:	03e4      	lsls	r4, r4, #15
				millis--;
 80005bc:	bf48      	it	mi
 80005be:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80005c2:	e7f7      	b.n	80005b4 <main+0x9c>
 80005c4:	2000043c 	.word	0x2000043c
 80005c8:	08002168 	.word	0x08002168
 80005cc:	08002170 	.word	0x08002170
 80005d0:	0800218a 	.word	0x0800218a
 80005d4:	0800219d 	.word	0x0800219d
 80005d8:	080021af 	.word	0x080021af
 80005dc:	20000434 	.word	0x20000434
 80005e0:	20000894 	.word	0x20000894
 80005e4:	e000e010 	.word	0xe000e010

080005e8 <TM_SPI_Send.constprop.1>:
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <TM_SPI_Send.constprop.1+0x3c>)
 80005ea:	8813      	ldrh	r3, [r2, #0]
 80005ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f0:	b29b      	uxth	r3, r3
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 80005f2:	b510      	push	{r4, lr}
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 80005f4:	b1a3      	cbz	r3, 8000620 <TM_SPI_Send.constprop.1+0x38>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT(SPIx);
 80005f6:	4614      	mov	r4, r2
 80005f8:	8911      	ldrh	r1, [r2, #8]
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <TM_SPI_Send.constprop.1+0x3c>)
 80005fc:	0789      	lsls	r1, r1, #30
 80005fe:	d0fb      	beq.n	80005f8 <TM_SPI_Send.constprop.1+0x10>
 8000600:	8921      	ldrh	r1, [r4, #8]
 8000602:	0609      	lsls	r1, r1, #24
 8000604:	d4f8      	bmi.n	80005f8 <TM_SPI_Send.constprop.1+0x10>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8000606:	b280      	uxth	r0, r0
 8000608:	8198      	strh	r0, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
 800060a:	4619      	mov	r1, r3
 800060c:	891a      	ldrh	r2, [r3, #8]
 800060e:	0790      	lsls	r0, r2, #30
 8000610:	d0fc      	beq.n	800060c <TM_SPI_Send.constprop.1+0x24>
 8000612:	890a      	ldrh	r2, [r1, #8]
 8000614:	0612      	lsls	r2, r2, #24
 8000616:	d4f9      	bmi.n	800060c <TM_SPI_Send.constprop.1+0x24>
	
	/* Return data from buffer */
	return SPIx->DR;
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <TM_SPI_Send.constprop.1+0x3c>)
 800061a:	8998      	ldrh	r0, [r3, #12]
 800061c:	b2c0      	uxtb	r0, r0
 800061e:	bd10      	pop	{r4, pc}
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8000620:	4618      	mov	r0, r3
	/* Wait for transmission to complete */
	SPI_WAIT(SPIx);
	
	/* Return data from buffer */
	return SPIx->DR;
}
 8000622:	bd10      	pop	{r4, pc}
 8000624:	40015000 	.word	0x40015000

08000628 <TM_ILI9341_InitPins>:
	TM_ILI9341_SetLayer2();
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
	TM_ILI9341_SetLayer1();
}

void TM_ILI9341_InitPins(void) {
 8000628:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	/* Init WRX pin */
	TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 800062c:	4f33      	ldr	r7, [pc, #204]	; (80006fc <TM_ILI9341_InitPins+0xd4>)
	
	/* Init CS pin */
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 800062e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8000708 <TM_ILI9341_InitPins+0xe0>

	/* GPIOA                     Blue5        VSYNC        Green2       Red4          Red5 */
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
	
	/* GPIOB                     Red3         Red6 */
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, 0x09);
 8000632:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800070c <TM_ILI9341_InitPins+0xe4>
	TM_ILI9341_SetLayer1();
}

void TM_ILI9341_InitPins(void) {
	/* Init WRX pin */
	TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 8000636:	2400      	movs	r4, #0
 8000638:	2501      	movs	r5, #1
 800063a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800063e:	4623      	mov	r3, r4
 8000640:	462a      	mov	r2, r5
 8000642:	4638      	mov	r0, r7
 8000644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000648:	f000 fd6e 	bl	8001128 <TM_GPIO_Init>
	
	/* Init CS pin */
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);

	/* GPIOA                     Blue5        VSYNC        Green2       Red4          Red5 */
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 800064c:	260e      	movs	r6, #14
void TM_ILI9341_InitPins(void) {
	/* Init WRX pin */
	TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	
	/* Init CS pin */
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 800064e:	e88d 0030 	stmia.w	sp, {r4, r5}
 8000652:	4623      	mov	r3, r4
 8000654:	462a      	mov	r2, r5
 8000656:	4648      	mov	r0, r9

	/* GPIOA                     Blue5        VSYNC        Green2       Red4          Red5 */
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 8000658:	2503      	movs	r5, #3
void TM_ILI9341_InitPins(void) {
	/* Init WRX pin */
	TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	
	/* Init CS pin */
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 800065a:	2104      	movs	r1, #4
 800065c:	f000 fd64 	bl	8001128 <TM_GPIO_Init>

	/* GPIOA                     Blue5        VSYNC        Green2       Red4          Red5 */
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
	
	/* GPIOB                     Red3         Red6 */
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, 0x09);
 8000660:	f04f 0809 	mov.w	r8, #9
	
	/* Init CS pin */
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);

	/* GPIOA                     Blue5        VSYNC        Green2       Red4          Red5 */
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 8000664:	4623      	mov	r3, r4
 8000666:	4622      	mov	r2, r4
 8000668:	e88d 0060 	stmia.w	sp, {r5, r6}
 800066c:	f641 0158 	movw	r1, #6232	; 0x1858
 8000670:	4823      	ldr	r0, [pc, #140]	; (8000700 <TM_ILI9341_InitPins+0xd8>)
 8000672:	f000 fd74 	bl	800115e <TM_GPIO_InitAlternate>
	
	/* GPIOB                     Red3         Red6 */
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, 0x09);
 8000676:	4623      	mov	r3, r4
 8000678:	4622      	mov	r2, r4
 800067a:	4629      	mov	r1, r5
 800067c:	4650      	mov	r0, sl
 800067e:	e88d 0120 	stmia.w	sp, {r5, r8}
 8000682:	f000 fd6c 	bl	800115e <TM_GPIO_InitAlternate>
	
	/* GPIOB                     Blue6		  Blue7        Green4        Green5 */
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 8000686:	4623      	mov	r3, r4
 8000688:	4622      	mov	r2, r4
 800068a:	4650      	mov	r0, sl
 800068c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8000690:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000694:	f000 fd63 	bl	800115e <TM_GPIO_InitAlternate>
	
	/* GPIOC                     HSYNC        Green6       Red2 */
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 8000698:	4623      	mov	r3, r4
 800069a:	4622      	mov	r2, r4
 800069c:	4648      	mov	r0, r9
 800069e:	e88d 0060 	stmia.w	sp, {r5, r6}
 80006a2:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80006a6:	f000 fd5a 	bl	800115e <TM_GPIO_InitAlternate>
	
	/* GPIOD                     Green7       Blue2 */
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_3 | GPIO_PIN_6 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 80006aa:	4623      	mov	r3, r4
 80006ac:	4622      	mov	r2, r4
 80006ae:	4638      	mov	r0, r7
 80006b0:	e88d 0060 	stmia.w	sp, {r5, r6}
 80006b4:	f44f 6189 	mov.w	r1, #1096	; 0x448
 80006b8:	f000 fd51 	bl	800115e <TM_GPIO_InitAlternate>
	
	/* GPIOF                     Enable */
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);

	/* GPIOG                     Red7         DOTCLK       Blue3 */
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 80006bc:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
	
	/* GPIOD                     Green7       Blue2 */
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_3 | GPIO_PIN_6 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
	
	/* GPIOF                     Enable */
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 80006c0:	4623      	mov	r3, r4
 80006c2:	4622      	mov	r2, r4
 80006c4:	e88d 0060 	stmia.w	sp, {r5, r6}
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <TM_ILI9341_InitPins+0xdc>)
 80006ce:	f000 fd46 	bl	800115e <TM_GPIO_InitAlternate>

	/* GPIOG                     Red7         DOTCLK       Blue3 */
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_LTDC);
 80006d2:	4623      	mov	r3, r4
 80006d4:	4622      	mov	r2, r4
 80006d6:	4638      	mov	r0, r7
 80006d8:	e88d 0060 	stmia.w	sp, {r5, r6}
 80006dc:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 80006e0:	f000 fd3d 	bl	800115e <TM_GPIO_InitAlternate>

	/* GPIOG                     Green3        Blue4 */
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_10 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, 0x09);
 80006e4:	e88d 0120 	stmia.w	sp, {r5, r8}
 80006e8:	4623      	mov	r3, r4
 80006ea:	4622      	mov	r2, r4
 80006ec:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80006f0:	4638      	mov	r0, r7
 80006f2:	f000 fd34 	bl	800115e <TM_GPIO_InitAlternate>
}
 80006f6:	b002      	add	sp, #8
 80006f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40020000 	.word	0x40020000
 8000704:	40021400 	.word	0x40021400
 8000708:	40020800 	.word	0x40020800
 800070c:	40020400 	.word	0x40020400

08000710 <TM_LCD9341_InitLTDC>:

void TM_LCD9341_InitLTDC(void) {
	LTDC_InitTypeDef LTDC_InitStruct;
	
	/* Enable the LTDC Clock */
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <TM_LCD9341_InitLTDC+0x7c>)
 8000712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);

	TM_ILI9341_SendCommand(ILI9341_GRAM);
}

void TM_LCD9341_InitLTDC(void) {
 8000714:	b500      	push	{lr}
	LTDC_InitTypeDef LTDC_InitStruct;
	
	/* Enable the LTDC Clock */
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 8000716:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800071a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Enable the DMA2D Clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2DEN;
 800071c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);

	TM_ILI9341_SendCommand(ILI9341_GRAM);
}

void TM_LCD9341_InitLTDC(void) {
 800071e:	b091      	sub	sp, #68	; 0x44
	
	/* Enable the LTDC Clock */
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;

	/* Enable the DMA2D Clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2DEN;
 8000720:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
	/* Enable Pixel Clock */
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 96 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	RCC_PLLSAIConfig(192, 7, 4);
 8000726:	2107      	movs	r1, #7
	/* Enable the DMA2D Clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2DEN;
	  
	/* Polarity configuration */
	/* Initialize the horizontal synchronization polarity as active low */
	LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8000728:	2300      	movs	r3, #0
	/* Enable Pixel Clock */
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 96 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	RCC_PLLSAIConfig(192, 7, 4);
 800072a:	2204      	movs	r2, #4
 800072c:	20c0      	movs	r0, #192	; 0xc0
	/* Enable the DMA2D Clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2DEN;
	  
	/* Polarity configuration */
	/* Initialize the horizontal synchronization polarity as active low */
	LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 800072e:	9301      	str	r3, [sp, #4]
	/* Initialize the vertical synchronization polarity as active low */  
	LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8000730:	9302      	str	r3, [sp, #8]
	/* Initialize the data enable polarity as active low */
	LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 8000732:	9303      	str	r3, [sp, #12]
	/* Initialize the pixel clock polarity as input pixel clock */ 
	LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8000734:	9304      	str	r3, [sp, #16]

	/* Configure R,G,B component values for LCD background color */                   
	LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8000736:	930d      	str	r3, [sp, #52]	; 0x34
	LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8000738:	930e      	str	r3, [sp, #56]	; 0x38
	LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 800073a:	930f      	str	r3, [sp, #60]	; 0x3c
	/* Enable Pixel Clock */
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 96 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	RCC_PLLSAIConfig(192, 7, 4);
 800073c:	f001 f810 	bl	8001760 <RCC_PLLSAIConfig>
	RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div4);
 8000740:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000744:	f001 f81e 	bl	8001784 <RCC_LTDCCLKDivConfig>

	/* Enable PLLSAI Clock */
    RCC_PLLSAICmd(ENABLE);
 8000748:	2001      	movs	r0, #1
 800074a:	f001 f815 	bl	8001778 <RCC_PLLSAICmd>
	
    /* Wait for PLLSAI activation */
	while (RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET) {
 800074e:	203d      	movs	r0, #61	; 0x3d
 8000750:	f001 f824 	bl	800179c <RCC_GetFlagStatus>
 8000754:	2800      	cmp	r0, #0
 8000756:	d0fa      	beq.n	800074e <TM_LCD9341_InitLTDC+0x3e>
	
	}
	
    /* Timing configuration */  
    /* Configure horizontal synchronization width */     
    LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8000758:	2309      	movs	r3, #9
 800075a:	9305      	str	r3, [sp, #20]
    /* Configure vertical synchronization height */
    LTDC_InitStruct.LTDC_VerticalSync = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	9306      	str	r3, [sp, #24]
    /* Configure accumulated horizontal back porch */
    LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 8000760:	231d      	movs	r3, #29
 8000762:	9307      	str	r3, [sp, #28]
    /* Configure accumulated vertical back porch */
    LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8000764:	2303      	movs	r3, #3
 8000766:	9308      	str	r3, [sp, #32]
    /* Configure accumulated active width */  
    LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8000768:	f240 130d 	movw	r3, #269	; 0x10d
 800076c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Configure accumulated active height */
    LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 800076e:	f240 1343 	movw	r3, #323	; 0x143
 8000772:	930a      	str	r3, [sp, #40]	; 0x28
    /* Configure total width */
    LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8000774:	f240 1317 	movw	r3, #279	; 0x117
 8000778:	930b      	str	r3, [sp, #44]	; 0x2c
    /* Configure total height */
    LTDC_InitStruct.LTDC_TotalHeigh = 327;

	/* Init LTDC */
	LTDC_Init(&LTDC_InitStruct);
 800077a:	a801      	add	r0, sp, #4
    /* Configure accumulated active height */
    LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
    /* Configure total width */
    LTDC_InitStruct.LTDC_TotalWidth = 279; 
    /* Configure total height */
    LTDC_InitStruct.LTDC_TotalHeigh = 327;
 800077c:	f240 1347 	movw	r3, #327	; 0x147
 8000780:	930c      	str	r3, [sp, #48]	; 0x30

	/* Init LTDC */
	LTDC_Init(&LTDC_InitStruct);
 8000782:	f000 ff29 	bl	80015d8 <LTDC_Init>
}
 8000786:	b011      	add	sp, #68	; 0x44
 8000788:	f85d fb04 	ldr.w	pc, [sp], #4
 800078c:	40023800 	.word	0x40023800

08000790 <TM_ILI9341_InitLayers>:
	TM_ILI9341_SendCommand(0x28);
	/* Disable LTDC */
	LTDC_Cmd(DISABLE);
}

void TM_ILI9341_InitLayers(void) {
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
		Vertical stop   = Vertical start + LCD_PIXEL_HEIGHT - 1        
	*/      
	LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
	LTDC_Layer_InitStruct.LTDC_HorizontalStop = 269;
	LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
	LTDC_Layer_InitStruct.LTDC_VerticalStop = 323;
 8000792:	2204      	movs	r2, #4
	TM_ILI9341_SendCommand(0x28);
	/* Disable LTDC */
	LTDC_Cmd(DISABLE);
}

void TM_ILI9341_InitLayers(void) {
 8000794:	b091      	sub	sp, #68	; 0x44
		Vertical stop   = Vertical start + LCD_PIXEL_HEIGHT - 1        
	*/      
	LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
	LTDC_Layer_InitStruct.LTDC_HorizontalStop = 269;
	LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
	LTDC_Layer_InitStruct.LTDC_VerticalStop = 323;
 8000796:	201e      	movs	r0, #30
 8000798:	f240 110d 	movw	r1, #269	; 0x10d
 800079c:	f240 1343 	movw	r3, #323	; 0x143
 80007a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}

	/* Pixel Format configuration*/
    LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 80007a4:	2302      	movs	r3, #2
 80007a6:	9304      	str	r3, [sp, #16]
    LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
    LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
    LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
	
    /* Configure blending factors */       
    LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 80007a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ac:	930a      	str	r3, [sp, #40]	; 0x28
    LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 80007ae:	2305      	movs	r3, #5
 80007b0:	930b      	str	r3, [sp, #44]	; 0x2c
    /* the length of one line of pixels in bytes + 3 then :
    Line Lenth = Active high width x number of bytes per pixel + 3 
    Active high width         = LCD_PIXEL_WIDTH 
    number of bytes per pixel = 2    (pixel_format : RGB565) 
    */
	LTDC_Layer_InitStruct.LTDC_CFBLineLength = 240 * 2 + 3;
 80007b2:	f240 13e3 	movw	r3, #483	; 0x1e3
	LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
	
	/* Start Address configuration : the LCD Frame buffer is defined on SDRAM */   
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER;
	/* Initialize Layer 1 */
	LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80007b6:	4e21      	ldr	r6, [pc, #132]	; (800083c <TM_ILI9341_InitLayers+0xac>)
    /* the length of one line of pixels in bytes + 3 then :
    Line Lenth = Active high width x number of bytes per pixel + 3 
    Active high width         = LCD_PIXEL_WIDTH 
    number of bytes per pixel = 2    (pixel_format : RGB565) 
    */
	LTDC_Layer_InitStruct.LTDC_CFBLineLength = 240 * 2 + 3;
 80007b8:	930d      	str	r3, [sp, #52]	; 0x34
	
	/* the pitch is the increment from the start of one line of pixels to the 
    start of the next line in bytes, then :
    Pitch = Active high width x number of bytes per pixel     
    */ 
	LTDC_Layer_InitStruct.LTDC_CFBPitch = 240 * 2;
 80007ba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007be:	930e      	str	r3, [sp, #56]	; 0x38
	/* Configure the number of lines */ 
	LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
 80007c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
	/* Pixel Format configuration*/
    LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
    /* Alpha constant (255 totally opaque) */
    LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
    /* Default Color configuration (configure A,R,G,B component values) */          
    LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80007c4:	2400      	movs	r4, #0
	LTDC_Layer_InitStruct.LTDC_VerticalStop = 323;

	/* Pixel Format configuration*/
    LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
    /* Alpha constant (255 totally opaque) */
    LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80007c6:	27ff      	movs	r7, #255	; 0xff
    start of the next line in bytes, then :
    Pitch = Active high width x number of bytes per pixel     
    */ 
	LTDC_Layer_InitStruct.LTDC_CFBPitch = 240 * 2;
	/* Configure the number of lines */ 
	LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
 80007c8:	930f      	str	r3, [sp, #60]	; 0x3c
	
	/* Start Address configuration : the LCD Frame buffer is defined on SDRAM */   
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER;
	/* Initialize Layer 1 */
	LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80007ca:	4669      	mov	r1, sp
	LTDC_Layer_InitStruct.LTDC_CFBPitch = 240 * 2;
	/* Configure the number of lines */ 
	LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
	
	/* Start Address configuration : the LCD Frame buffer is defined on SDRAM */   
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER;
 80007cc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
	/* Initialize Layer 1 */
	LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80007d0:	4630      	mov	r0, r6
	
	/* Configure blending factors */ 
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
	/* Initialize Layer 2 */
	LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80007d2:	4d1b      	ldr	r5, [pc, #108]	; (8000840 <TM_ILI9341_InitLayers+0xb0>)
	LTDC_Layer_InitStruct.LTDC_CFBPitch = 240 * 2;
	/* Configure the number of lines */ 
	LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
	
	/* Start Address configuration : the LCD Frame buffer is defined on SDRAM */   
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER;
 80007d4:	930c      	str	r3, [sp, #48]	; 0x30
	LTDC_Layer_InitStruct.LTDC_VerticalStop = 323;

	/* Pixel Format configuration*/
    LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
    /* Alpha constant (255 totally opaque) */
    LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80007d6:	9705      	str	r7, [sp, #20]
    /* Default Color configuration (configure A,R,G,B component values) */          
    LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80007d8:	9406      	str	r4, [sp, #24]
    LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 80007da:	9407      	str	r4, [sp, #28]
    LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 80007dc:	9408      	str	r4, [sp, #32]
    LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 80007de:	9409      	str	r4, [sp, #36]	; 0x24
	LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 320;
	
	/* Start Address configuration : the LCD Frame buffer is defined on SDRAM */   
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER;
	/* Initialize Layer 1 */
	LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80007e0:	f000 ff66 	bl	80016b0 <LTDC_LayerInit>

    /* Configure Layer2 */
    /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */  
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER + ILI9341_FRAME_OFFSET;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <TM_ILI9341_InitLayers+0xb4>)
 80007e6:	930c      	str	r3, [sp, #48]	; 0x30
	
	/* Configure blending factors */ 
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 80007e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
	/* Initialize Layer 2 */
	LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80007ec:	4669      	mov	r1, sp
    /* Configure Layer2 */
    /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */  
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER + ILI9341_FRAME_OFFSET;
	
	/* Configure blending factors */ 
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 80007ee:	930a      	str	r3, [sp, #40]	; 0x28
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
	/* Initialize Layer 2 */
	LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80007f0:	4628      	mov	r0, r5
    /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */  
	LTDC_Layer_InitStruct.LTDC_CFBStartAdress = ILI9341_FRAME_BUFFER + ILI9341_FRAME_OFFSET;
	
	/* Configure blending factors */ 
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
	LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80007f2:	2307      	movs	r3, #7
 80007f4:	930b      	str	r3, [sp, #44]	; 0x2c
	/* Initialize Layer 2 */
	LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80007f6:	f000 ff5b 	bl	80016b0 <LTDC_LayerInit>

	LTDC_ReloadConfig(LTDC_IMReload);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 ff52 	bl	80016a4 <LTDC_ReloadConfig>
	
	/* Enable foreground & background Layers */
	LTDC_LayerCmd(LTDC_Layer1, ENABLE);
 8000800:	4630      	mov	r0, r6
 8000802:	2101      	movs	r1, #1
 8000804:	f000 ffa1 	bl	800174a <LTDC_LayerCmd>
	LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8000808:	2101      	movs	r1, #1
 800080a:	4628      	mov	r0, r5
 800080c:	f000 ff9d 	bl	800174a <LTDC_LayerCmd>
	
	/* Reload immediate */
	LTDC_ReloadConfig(LTDC_IMReload);
 8000810:	2001      	movs	r0, #1
 8000812:	f000 ff47 	bl	80016a4 <LTDC_ReloadConfig>

	LTDC_DitherCmd(ENABLE);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 ff38 	bl	800168c <LTDC_DitherCmd>
	
	/* Display On */
	LTDC_Cmd(ENABLE);
 800081c:	2001      	movs	r0, #1
 800081e:	f000 ff29 	bl	8001674 <LTDC_Cmd>
	
	/* Set opacity */
	LTDC_LayerAlpha(LTDC_Layer1, 255);
 8000822:	4639      	mov	r1, r7
 8000824:	4630      	mov	r0, r6
 8000826:	f000 ff99 	bl	800175c <LTDC_LayerAlpha>
	LTDC_LayerAlpha(LTDC_Layer2, 0);
 800082a:	4621      	mov	r1, r4
 800082c:	4628      	mov	r0, r5
 800082e:	f000 ff95 	bl	800175c <LTDC_LayerAlpha>
	
	/* Immediate reload */
	LTDC_ReloadConfig(LTDC_IMReload);
 8000832:	2001      	movs	r0, #1
 8000834:	f000 ff36 	bl	80016a4 <LTDC_ReloadConfig>
}
 8000838:	b011      	add	sp, #68	; 0x44
 800083a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083c:	40016884 	.word	0x40016884
 8000840:	40016904 	.word	0x40016904
 8000844:	d0025800 	.word	0xd0025800

08000848 <TM_ILI9341_SendCommand>:

void TM_ILI9341_SendCommand(uint8_t data) {
 8000848:	b538      	push	{r3, r4, r5, lr}
	ILI9341_WRX_RESET;
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <TM_ILI9341_SendCommand+0x18>)
	ILI9341_CS_RESET;
 800084c:	4c05      	ldr	r4, [pc, #20]	; (8000864 <TM_ILI9341_SendCommand+0x1c>)
	/* Immediate reload */
	LTDC_ReloadConfig(LTDC_IMReload);
}

void TM_ILI9341_SendCommand(uint8_t data) {
	ILI9341_WRX_RESET;
 800084e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	ILI9341_CS_RESET;
 8000852:	2504      	movs	r5, #4
	/* Immediate reload */
	LTDC_ReloadConfig(LTDC_IMReload);
}

void TM_ILI9341_SendCommand(uint8_t data) {
	ILI9341_WRX_RESET;
 8000854:	835a      	strh	r2, [r3, #26]
	ILI9341_CS_RESET;
 8000856:	8365      	strh	r5, [r4, #26]
	TM_SPI_Send(ILI9341_SPI, data);
 8000858:	f7ff fec6 	bl	80005e8 <TM_SPI_Send.constprop.1>
	ILI9341_CS_SET;
 800085c:	8325      	strh	r5, [r4, #24]
 800085e:	bd38      	pop	{r3, r4, r5, pc}
 8000860:	40020c00 	.word	0x40020c00
 8000864:	40020800 	.word	0x40020800

08000868 <TM_ILI9341_SendData>:
}

void TM_ILI9341_SendData(uint8_t data) {
 8000868:	b538      	push	{r3, r4, r5, lr}
	ILI9341_WRX_SET;
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <TM_ILI9341_SendData+0x18>)
	ILI9341_CS_RESET;
 800086c:	4c05      	ldr	r4, [pc, #20]	; (8000884 <TM_ILI9341_SendData+0x1c>)
	TM_SPI_Send(ILI9341_SPI, data);
	ILI9341_CS_SET;
}

void TM_ILI9341_SendData(uint8_t data) {
	ILI9341_WRX_SET;
 800086e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	ILI9341_CS_RESET;
 8000872:	2504      	movs	r5, #4
	TM_SPI_Send(ILI9341_SPI, data);
	ILI9341_CS_SET;
}

void TM_ILI9341_SendData(uint8_t data) {
	ILI9341_WRX_SET;
 8000874:	831a      	strh	r2, [r3, #24]
	ILI9341_CS_RESET;
 8000876:	8365      	strh	r5, [r4, #26]
	TM_SPI_Send(ILI9341_SPI, data);
 8000878:	f7ff feb6 	bl	80005e8 <TM_SPI_Send.constprop.1>
	ILI9341_CS_SET;
 800087c:	8325      	strh	r5, [r4, #24]
 800087e:	bd38      	pop	{r3, r4, r5, pc}
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40020800 	.word	0x40020800

08000888 <TM_ILI9341_DrawPixel>:
}

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8000888:	b530      	push	{r4, r5, lr}
	uint16_t tmp;
	if (x >= ILI9341_Opts.Width) {
 800088a:	4c15      	ldr	r4, [pc, #84]	; (80008e0 <TM_ILI9341_DrawPixel+0x58>)
 800088c:	8825      	ldrh	r5, [r4, #0]
 800088e:	4285      	cmp	r5, r0
 8000890:	d924      	bls.n	80008dc <TM_ILI9341_DrawPixel+0x54>
		return;
	}
	if (y >= ILI9341_Opts.Height) {
 8000892:	8863      	ldrh	r3, [r4, #2]
 8000894:	428b      	cmp	r3, r1
 8000896:	d921      	bls.n	80008dc <TM_ILI9341_DrawPixel+0x54>
		return;
	}
	if (ILI9341_Opts.Orient == TM_ILI9341_Orientation_Portrait_1) {
 8000898:	7ba3      	ldrb	r3, [r4, #14]
 800089a:	b923      	cbnz	r3, 80008a6 <TM_ILI9341_DrawPixel+0x1e>
		/* Portrait1 */
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + 2 * (ILI9341_PIXEL - x - ILI9341_Opts.Width * y)) = color;
 800089c:	f5c0 3396 	rsb	r3, r0, #76800	; 0x12c00
 80008a0:	fb01 3015 	mls	r0, r1, r5, r3
 80008a4:	e015      	b.n	80008d2 <TM_ILI9341_DrawPixel+0x4a>
	} else if (ILI9341_Opts.Orient == TM_ILI9341_Orientation_Portrait_2) {
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d102      	bne.n	80008b0 <TM_ILI9341_DrawPixel+0x28>
		/* Portrait2, original */
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + 2 * (x + ILI9341_Opts.Width * y)) = color;
 80008aa:	fb01 0005 	mla	r0, r1, r5, r0
 80008ae:	e010      	b.n	80008d2 <TM_ILI9341_DrawPixel+0x4a>
	} else if (ILI9341_Opts.Orient == TM_ILI9341_Orientation_Landscape_1) {
 80008b0:	2b02      	cmp	r3, #2
		/* L andscape 1 */
		tmp = x;
		x = y;
		y = ILI9341_HEIGHT - 1 - tmp;
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + 2 * (x + ILI9341_WIDTH * y)) = color;
 80008b2:	bf08      	it	eq
 80008b4:	f5c0 709f 	rsbeq	r0, r0, #318	; 0x13e
 80008b8:	f04f 03f0 	mov.w	r3, #240	; 0xf0
 80008bc:	bf07      	ittee	eq
 80008be:	3001      	addeq	r0, #1
 80008c0:	b280      	uxtheq	r0, r0
	} else {
		/* Landscape2 */
		tmp = y;
		y = x;
		x = ILI9341_WIDTH - 1 - tmp;
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + 2 * (x + ILI9341_WIDTH * y)) = color;
 80008c2:	f1c1 01ef 	rsbne	r1, r1, #239	; 0xef
 80008c6:	4358      	mulne	r0, r3
	} else if (ILI9341_Opts.Orient == TM_ILI9341_Orientation_Landscape_1) {
		/* L andscape 1 */
		tmp = x;
		x = y;
		y = ILI9341_HEIGHT - 1 - tmp;
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + 2 * (x + ILI9341_WIDTH * y)) = color;
 80008c8:	bf0c      	ite	eq
 80008ca:	fb03 1000 	mlaeq	r0, r3, r0, r1
	} else {
		/* Landscape2 */
		tmp = y;
		y = x;
		x = ILI9341_WIDTH - 1 - tmp;
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + 2 * (x + ILI9341_WIDTH * y)) = color;
 80008ce:	fa10 f081 	uxtahne	r0, r0, r1
 80008d2:	68a3      	ldr	r3, [r4, #8]
 80008d4:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80008d8:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 80008dc:	bd30      	pop	{r4, r5, pc}
 80008de:	bf00      	nop
 80008e0:	200008ec 	.word	0x200008ec

080008e4 <TM_ILI9341_Fill>:

void TM_ILI9341_Fill(uint32_t color) {
	uint32_t i;
	uint32_t pixels = ILI9341_PIXEL * 2;
	for (i = 0; i < pixels; i += 2) {
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + i) = color;
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <TM_ILI9341_Fill+0x18>)
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <TM_ILI9341_Fill+0x1c>)
 80008e8:	6899      	ldr	r1, [r3, #8]
 80008ea:	f101 4350 	add.w	r3, r1, #3489660928	; 0xd0000000
 80008ee:	3b02      	subs	r3, #2
 80008f0:	440a      	add	r2, r1
 80008f2:	f823 0f02 	strh.w	r0, [r3, #2]!
}

void TM_ILI9341_Fill(uint32_t color) {
	uint32_t i;
	uint32_t pixels = ILI9341_PIXEL * 2;
	for (i = 0; i < pixels; i += 2) {
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d1fb      	bne.n	80008f2 <TM_ILI9341_Fill+0xe>
		*(uint16_t *) (ILI9341_FRAME_BUFFER + ILI9341_Opts.CurrentLayerOffset + i) = color;
	}
}
 80008fa:	4770      	bx	lr
 80008fc:	200008ec 	.word	0x200008ec
 8000900:	d00257fe 	.word	0xd00257fe

08000904 <TM_ILI9341_Delay>:

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8000904:	b082      	sub	sp, #8
 8000906:	9001      	str	r0, [sp, #4]
	for (; delay != 0; delay--); 
 8000908:	9b01      	ldr	r3, [sp, #4]
 800090a:	b11b      	cbz	r3, 8000914 <TM_ILI9341_Delay+0x10>
 800090c:	9b01      	ldr	r3, [sp, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	e7f9      	b.n	8000908 <TM_ILI9341_Delay+0x4>
}
 8000914:	b002      	add	sp, #8
 8000916:	4770      	bx	lr

08000918 <TM_ILI9341_InitLCD>:

	/* GPIOG                     Green3        Blue4 */
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_10 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, 0x09);
}

void TM_ILI9341_InitLCD(void) {	
 8000918:	b510      	push	{r4, lr}
	TM_ILI9341_SendCommand(0xCA);
 800091a:	20ca      	movs	r0, #202	; 0xca
 800091c:	f7ff ff94 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC3);
 8000920:	20c3      	movs	r0, #195	; 0xc3
 8000922:	f7ff ffa1 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8000926:	2008      	movs	r0, #8
 8000928:	f7ff ff9e 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x50);
 800092c:	2050      	movs	r0, #80	; 0x50
 800092e:	f7ff ff9b 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 8000932:	20cf      	movs	r0, #207	; 0xcf
 8000934:	f7ff ff88 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff ff95 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800093e:	20c1      	movs	r0, #193	; 0xc1
 8000940:	f7ff ff92 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 8000944:	2030      	movs	r0, #48	; 0x30
 8000946:	f7ff ff8f 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 800094a:	20ed      	movs	r0, #237	; 0xed
 800094c:	f7ff ff7c 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 8000950:	2064      	movs	r0, #100	; 0x64
 8000952:	f7ff ff89 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8000956:	2003      	movs	r0, #3
 8000958:	f7ff ff86 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 800095c:	2012      	movs	r0, #18
 800095e:	f7ff ff83 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 8000962:	2081      	movs	r0, #129	; 0x81
 8000964:	f7ff ff80 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 8000968:	20e8      	movs	r0, #232	; 0xe8
 800096a:	f7ff ff6d 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 800096e:	2085      	movs	r0, #133	; 0x85
 8000970:	f7ff ff7a 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff77 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 800097a:	2078      	movs	r0, #120	; 0x78
 800097c:	f7ff ff74 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 8000980:	20cb      	movs	r0, #203	; 0xcb
 8000982:	f7ff ff61 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 8000986:	2039      	movs	r0, #57	; 0x39
 8000988:	f7ff ff6e 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 800098c:	202c      	movs	r0, #44	; 0x2c
 800098e:	f7ff ff6b 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff ff68 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 8000998:	2034      	movs	r0, #52	; 0x34
 800099a:	f7ff ff65 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff ff62 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 80009a4:	20f7      	movs	r0, #247	; 0xf7
 80009a6:	f7ff ff4f 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 80009aa:	2020      	movs	r0, #32
 80009ac:	f7ff ff5c 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 80009b0:	20ea      	movs	r0, #234	; 0xea
 80009b2:	f7ff ff49 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ff56 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff ff53 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 80009c2:	20b1      	movs	r0, #177	; 0xb1
 80009c4:	f7ff ff40 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff4d 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 80009ce:	201b      	movs	r0, #27
 80009d0:	f7ff ff4a 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 80009d4:	20b6      	movs	r0, #182	; 0xb6
 80009d6:	f7ff ff37 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 80009da:	200a      	movs	r0, #10
 80009dc:	f7ff ff44 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA2);
 80009e0:	20a2      	movs	r0, #162	; 0xa2
 80009e2:	f7ff ff41 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 80009e6:	20c0      	movs	r0, #192	; 0xc0
 80009e8:	f7ff ff2e 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 80009ec:	2010      	movs	r0, #16
 80009ee:	f7ff ff3b 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 80009f2:	20c1      	movs	r0, #193	; 0xc1
 80009f4:	f7ff ff28 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 80009f8:	2010      	movs	r0, #16
 80009fa:	f7ff ff35 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 80009fe:	20c5      	movs	r0, #197	; 0xc5
 8000a00:	f7ff ff22 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x45);
 8000a04:	2045      	movs	r0, #69	; 0x45
 8000a06:	f7ff ff2f 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x15);
 8000a0a:	2015      	movs	r0, #21
 8000a0c:	f7ff ff2c 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 8000a10:	20c7      	movs	r0, #199	; 0xc7
 8000a12:	f7ff ff19 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x90);
 8000a16:	2090      	movs	r0, #144	; 0x90
 8000a18:	f7ff ff26 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8000a1c:	2036      	movs	r0, #54	; 0x36
 8000a1e:	f7ff ff13 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC8);
 8000a22:	20c8      	movs	r0, #200	; 0xc8
 8000a24:	f7ff ff20 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 8000a28:	20f2      	movs	r0, #242	; 0xf2
 8000a2a:	f7ff ff0d 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ff1a 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_RGB_INTERFACE);
 8000a34:	20b0      	movs	r0, #176	; 0xb0
 8000a36:	f7ff ff07 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC2);
 8000a3a:	20c2      	movs	r0, #194	; 0xc2
 8000a3c:	f7ff ff14 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 8000a40:	20b6      	movs	r0, #182	; 0xb6
 8000a42:	f7ff ff01 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 8000a46:	200a      	movs	r0, #10
 8000a48:	f7ff ff0e 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA7);
 8000a4c:	20a7      	movs	r0, #167	; 0xa7
 8000a4e:	f7ff ff0b 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 8000a52:	2027      	movs	r0, #39	; 0x27
 8000a54:	f7ff ff08 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 8000a58:	2004      	movs	r0, #4
 8000a5a:	f7ff ff05 	bl	8000868 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8000a5e:	202a      	movs	r0, #42	; 0x2a
 8000a60:	f7ff fef2 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff feff 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fefc 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fef9 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 8000a76:	20ef      	movs	r0, #239	; 0xef
 8000a78:	f7ff fef6 	bl	8000868 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8000a7c:	202b      	movs	r0, #43	; 0x2b
 8000a7e:	f7ff fee3 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fef0 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff feed 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff feea 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 8000a94:	203f      	movs	r0, #63	; 0x3f
 8000a96:	f7ff fee7 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_INTERFACE);
 8000a9a:	20f6      	movs	r0, #246	; 0xf6
 8000a9c:	f7ff fed4 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff fee1 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fede 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x06);

	TM_ILI9341_SendCommand(ILI9341_GRAM);
	TM_ILI9341_Delay(1000000);
 8000aac:	4c3e      	ldr	r4, [pc, #248]	; (8000ba8 <TM_ILI9341_InitLCD+0x290>)
	TM_ILI9341_SendData(0x01);
	TM_ILI9341_SendData(0x3F);
	TM_ILI9341_SendCommand(ILI9341_INTERFACE);
	TM_ILI9341_SendData(0x01);
	TM_ILI9341_SendData(0x00);
	TM_ILI9341_SendData(0x06);
 8000aae:	2006      	movs	r0, #6
 8000ab0:	f7ff feda 	bl	8000868 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8000ab4:	202c      	movs	r0, #44	; 0x2c
 8000ab6:	f7ff fec7 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff ff22 	bl	8000904 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8000ac0:	2026      	movs	r0, #38	; 0x26
 8000ac2:	f7ff fec1 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fece 	bl	8000868 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8000acc:	20e0      	movs	r0, #224	; 0xe0
 8000ace:	f7ff febb 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f7ff fec8 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x29);
 8000ad8:	2029      	movs	r0, #41	; 0x29
 8000ada:	f7ff fec5 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x24);
 8000ade:	2024      	movs	r0, #36	; 0x24
 8000ae0:	f7ff fec2 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8000ae4:	200c      	movs	r0, #12
 8000ae6:	f7ff febf 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8000aea:	200e      	movs	r0, #14
 8000aec:	f7ff febc 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8000af0:	2009      	movs	r0, #9
 8000af2:	f7ff feb9 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8000af6:	204e      	movs	r0, #78	; 0x4e
 8000af8:	f7ff feb6 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8000afc:	2078      	movs	r0, #120	; 0x78
 8000afe:	f7ff feb3 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3C);
 8000b02:	203c      	movs	r0, #60	; 0x3c
 8000b04:	f7ff feb0 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8000b08:	2009      	movs	r0, #9
 8000b0a:	f7ff fead 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x13);
 8000b0e:	2013      	movs	r0, #19
 8000b10:	f7ff feaa 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 8000b14:	2005      	movs	r0, #5
 8000b16:	f7ff fea7 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x17);
 8000b1a:	2017      	movs	r0, #23
 8000b1c:	f7ff fea4 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8000b20:	2011      	movs	r0, #17
 8000b22:	f7ff fea1 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe9e 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8000b2c:	20e1      	movs	r0, #225	; 0xe1
 8000b2e:	f7ff fe8b 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff fe98 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x16);
 8000b38:	2016      	movs	r0, #22
 8000b3a:	f7ff fe95 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 8000b3e:	201b      	movs	r0, #27
 8000b40:	f7ff fe92 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 8000b44:	2004      	movs	r0, #4
 8000b46:	f7ff fe8f 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8000b4a:	2011      	movs	r0, #17
 8000b4c:	f7ff fe8c 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8000b50:	2007      	movs	r0, #7
 8000b52:	f7ff fe89 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8000b56:	2031      	movs	r0, #49	; 0x31
 8000b58:	f7ff fe86 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x33);
 8000b5c:	2033      	movs	r0, #51	; 0x33
 8000b5e:	f7ff fe83 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x42);
 8000b62:	2042      	movs	r0, #66	; 0x42
 8000b64:	f7ff fe80 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 8000b68:	2005      	movs	r0, #5
 8000b6a:	f7ff fe7d 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f7ff fe7a 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0A);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f7ff fe77 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 8000b7a:	2028      	movs	r0, #40	; 0x28
 8000b7c:	f7ff fe74 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2F);
 8000b80:	202f      	movs	r0, #47	; 0x2f
 8000b82:	f7ff fe71 	bl	8000868 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8000b86:	200f      	movs	r0, #15
 8000b88:	f7ff fe6e 	bl	8000868 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 8000b8c:	2011      	movs	r0, #17
 8000b8e:	f7ff fe5b 	bl	8000848 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 8000b92:	4620      	mov	r0, r4
 8000b94:	f7ff feb6 	bl	8000904 <TM_ILI9341_Delay>
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8000b98:	2029      	movs	r0, #41	; 0x29
 8000b9a:	f7ff fe55 	bl	8000848 <TM_ILI9341_SendCommand>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8000b9e:	202c      	movs	r0, #44	; 0x2c
}
 8000ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
	TM_ILI9341_Delay(1000000);
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8000ba4:	f7ff be50 	b.w	8000848 <TM_ILI9341_SendCommand>
 8000ba8:	000f4240 	.word	0x000f4240

08000bac <TM_ILI9341_Rotate>:
void TM_ILI9341_Delay(volatile unsigned int delay) {
	for (; delay != 0; delay--); 
}

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
	ILI9341_Opts.Orient = orientation;
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <TM_ILI9341_Rotate+0x24>)
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 8000bae:	2801      	cmp	r0, #1
 8000bb0:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 8000bb4:	f44f 71a0 	mov.w	r1, #320	; 0x140
		ILI9341_Opts.Width = ILI9341_WIDTH;
 8000bb8:	bf95      	itete	ls
 8000bba:	801a      	strhls	r2, [r3, #0]
		ILI9341_Opts.Height = ILI9341_HEIGHT;
		ILI9341_Opts.Orientation = TM_ILI9341_Portrait;
	} else {
		ILI9341_Opts.Width = ILI9341_HEIGHT;
		ILI9341_Opts.Height = ILI9341_WIDTH;
 8000bbc:	805a      	strhhi	r2, [r3, #2]
void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
	ILI9341_Opts.Orient = orientation;
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
		ILI9341_Opts.Width = ILI9341_WIDTH;
		ILI9341_Opts.Height = ILI9341_HEIGHT;
		ILI9341_Opts.Orientation = TM_ILI9341_Portrait;
 8000bbe:	2201      	movls	r2, #1
	} else {
		ILI9341_Opts.Width = ILI9341_HEIGHT;
		ILI9341_Opts.Height = ILI9341_WIDTH;
		ILI9341_Opts.Orientation = TM_ILI9341_Landscape;
 8000bc0:	2200      	movhi	r2, #0
void TM_ILI9341_Delay(volatile unsigned int delay) {
	for (; delay != 0; delay--); 
}

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
	ILI9341_Opts.Orient = orientation;
 8000bc2:	7398      	strb	r0, [r3, #14]
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
		ILI9341_Opts.Width = ILI9341_WIDTH;
		ILI9341_Opts.Height = ILI9341_HEIGHT;
 8000bc4:	bf94      	ite	ls
 8000bc6:	8059      	strhls	r1, [r3, #2]
		ILI9341_Opts.Orientation = TM_ILI9341_Portrait;
	} else {
		ILI9341_Opts.Width = ILI9341_HEIGHT;
 8000bc8:	8019      	strhhi	r1, [r3, #0]
		ILI9341_Opts.Height = ILI9341_WIDTH;
		ILI9341_Opts.Orientation = TM_ILI9341_Landscape;
 8000bca:	711a      	strb	r2, [r3, #4]
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200008ec 	.word	0x200008ec

08000bd4 <TM_ILI9341_SetLayer1>:
	}
}

void TM_ILI9341_SetLayer1(void) {
	ILI9341_Opts.CurrentLayerOffset = 0;
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <TM_ILI9341_SetLayer1+0xc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
	ILI9341_Opts.CurrentLayer = 0;
 8000bda:	715a      	strb	r2, [r3, #5]
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	200008ec 	.word	0x200008ec

08000be4 <TM_ILI9341_SetLayer2>:
}

void TM_ILI9341_SetLayer2(void) {
	ILI9341_Opts.CurrentLayerOffset = ILI9341_FRAME_OFFSET;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <TM_ILI9341_SetLayer2+0x10>)
 8000be6:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8000bea:	609a      	str	r2, [r3, #8]
	ILI9341_Opts.CurrentLayer = 1;
 8000bec:	2201      	movs	r2, #1
 8000bee:	715a      	strb	r2, [r3, #5]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200008ec 	.word	0x200008ec

08000bf8 <TM_ILI9341_Init>:
void TM_ILI9341_SendCommand(uint8_t data);
void TM_ILI9341_Delay(volatile unsigned int delay);
void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void TM_ILI9341_UpdateLayerOpacity(void);

void TM_ILI9341_Init(void) {
 8000bf8:	b508      	push	{r3, lr}
	/* Initialize pins used */
	TM_ILI9341_InitPins();
 8000bfa:	f7ff fd15 	bl	8000628 <TM_ILI9341_InitPins>
	/* SPI chip select high */
	ILI9341_CS_SET;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <TM_ILI9341_Init+0x6c>)
	/* Init SPI */
	TM_SPI_Init(ILI9341_SPI, ILI9341_SPI_PINS);
 8000c00:	4819      	ldr	r0, [pc, #100]	; (8000c68 <TM_ILI9341_Init+0x70>)

void TM_ILI9341_Init(void) {
	/* Initialize pins used */
	TM_ILI9341_InitPins();
	/* SPI chip select high */
	ILI9341_CS_SET;
 8000c02:	2204      	movs	r2, #4
 8000c04:	831a      	strh	r2, [r3, #24]
	/* Init SPI */
	TM_SPI_Init(ILI9341_SPI, ILI9341_SPI_PINS);
 8000c06:	2100      	movs	r1, #0
 8000c08:	f000 fc7c 	bl	8001504 <TM_SPI_Init>
	/* Init SDRAM */
	TM_SDRAM_Init();
 8000c0c:	f000 f8bc 	bl	8000d88 <TM_SDRAM_Init>
	/* Initialize LCD for LTDC */
	TM_ILI9341_InitLCD();
 8000c10:	f7ff fe82 	bl	8000918 <TM_ILI9341_InitLCD>
	/* Initialize LTDC */
	TM_LCD9341_InitLTDC();
 8000c14:	f7ff fd7c 	bl	8000710 <TM_LCD9341_InitLTDC>
	/* Initialize LTDC layers */
	TM_ILI9341_InitLayers();
 8000c18:	f7ff fdba 	bl	8000790 <TM_ILI9341_InitLayers>
	/* Set cursor X and Y */
	ILI9341_x = ILI9341_y = 0;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <TM_ILI9341_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <TM_ILI9341_Init+0x78>)
 8000c24:	801a      	strh	r2, [r3, #0]
	
	/* Set default settings */
	ILI9341_Opts.Width = ILI9341_WIDTH;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <TM_ILI9341_Init+0x7c>)
 8000c28:	21f0      	movs	r1, #240	; 0xf0
 8000c2a:	8019      	strh	r1, [r3, #0]
	ILI9341_Opts.Height = ILI9341_HEIGHT;
 8000c2c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c30:	8059      	strh	r1, [r3, #2]
	ILI9341_Opts.Orientation = TM_ILI9341_Portrait;
 8000c32:	2101      	movs	r1, #1
 8000c34:	7119      	strb	r1, [r3, #4]
	ILI9341_Opts.Orient = TM_ILI9341_Orientation_Portrait_1;
	ILI9341_Opts.CurrentLayer = 0;
	ILI9341_Opts.CurrentLayerOffset = 0;
	ILI9341_Opts.Layer1Opacity = 255;
 8000c36:	21ff      	movs	r1, #255	; 0xff
	
	/* Set default settings */
	ILI9341_Opts.Width = ILI9341_WIDTH;
	ILI9341_Opts.Height = ILI9341_HEIGHT;
	ILI9341_Opts.Orientation = TM_ILI9341_Portrait;
	ILI9341_Opts.Orient = TM_ILI9341_Orientation_Portrait_1;
 8000c38:	739a      	strb	r2, [r3, #14]
	ILI9341_Opts.CurrentLayer = 0;
 8000c3a:	715a      	strb	r2, [r3, #5]
	ILI9341_Opts.CurrentLayerOffset = 0;
 8000c3c:	609a      	str	r2, [r3, #8]
	ILI9341_Opts.Layer1Opacity = 255;
 8000c3e:	7319      	strb	r1, [r3, #12]
	ILI9341_Opts.Layer2Opacity = 0;
 8000c40:	735a      	strb	r2, [r3, #13]
	
	/* Fill both layers with default colors */
	TM_ILI9341_SetLayer1();
 8000c42:	f7ff ffc7 	bl	8000bd4 <TM_ILI9341_SetLayer1>
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
 8000c46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c4a:	f7ff fe4b 	bl	80008e4 <TM_ILI9341_Fill>
	TM_ILI9341_SetLayer2();
 8000c4e:	f7ff ffc9 	bl	8000be4 <TM_ILI9341_SetLayer2>
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
 8000c52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c56:	f7ff fe45 	bl	80008e4 <TM_ILI9341_Fill>
	TM_ILI9341_SetLayer1();
}
 8000c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	/* Fill both layers with default colors */
	TM_ILI9341_SetLayer1();
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
	TM_ILI9341_SetLayer2();
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
	TM_ILI9341_SetLayer1();
 8000c5e:	f7ff bfb9 	b.w	8000bd4 <TM_ILI9341_SetLayer1>
 8000c62:	bf00      	nop
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40015000 	.word	0x40015000
 8000c6c:	200008fc 	.word	0x200008fc
 8000c70:	200008e8 	.word	0x200008e8
 8000c74:	200008ec 	.word	0x200008ec

08000c78 <TM_ILI9341_Putc>:
	}
	/* Width */
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8000c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8000c7c:	4c21      	ldr	r4, [pc, #132]	; (8000d04 <TM_ILI9341_Putc+0x8c>)
	ILI9341_y = y;
 8000c7e:	4f22      	ldr	r7, [pc, #136]	; (8000d08 <TM_ILI9341_Putc+0x90>)
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8000c80:	8020      	strh	r0, [r4, #0]
	ILI9341_y = y;
 8000c82:	8039      	strh	r1, [r7, #0]
	}
	/* Width */
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8000c84:	461d      	mov	r5, r3
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
	ILI9341_y = y;
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.Width) {
 8000c86:	781b      	ldrb	r3, [r3, #0]
	}
	/* Width */
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8000c88:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
	ILI9341_y = y;
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.Width) {
 8000c8c:	4418      	add	r0, r3
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <TM_ILI9341_Putc+0x94>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	4298      	cmp	r0, r3
 8000c94:	dd04      	ble.n	8000ca0 <TM_ILI9341_Putc+0x28>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 8000c96:	786b      	ldrb	r3, [r5, #1]
 8000c98:	4419      	add	r1, r3
		ILI9341_x = 0;
 8000c9a:	2300      	movs	r3, #0
	/* Set coordinates */
	ILI9341_x = x;
	ILI9341_y = y;
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.Width) {
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 8000c9c:	8039      	strh	r1, [r7, #0]
		ILI9341_x = 0;
 8000c9e:	8023      	strh	r3, [r4, #0]
	}
	for (i = 0; i < font->FontHeight; i++) {
		b = font->data[(c - 32) * font->FontHeight + i];
		for (j = 0; j < font->FontWidth; j++) {
 8000ca0:	2600      	movs	r6, #0
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
		ILI9341_x = 0;
	}
	for (i = 0; i < font->FontHeight; i++) {
		b = font->data[(c - 32) * font->FontHeight + i];
 8000ca2:	f1a2 0920 	sub.w	r9, r2, #32
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.Width) {
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
		ILI9341_x = 0;
	}
	for (i = 0; i < font->FontHeight; i++) {
 8000ca6:	786b      	ldrb	r3, [r5, #1]
 8000ca8:	429e      	cmp	r6, r3
 8000caa:	d224      	bcs.n	8000cf6 <TM_ILI9341_Putc+0x7e>
		b = font->data[(c - 32) * font->FontHeight + i];
 8000cac:	fb03 6309 	mla	r3, r3, r9, r6
 8000cb0:	686a      	ldr	r2, [r5, #4]
 8000cb2:	f832 b013 	ldrh.w	fp, [r2, r3, lsl #1]
		for (j = 0; j < font->FontWidth; j++) {
 8000cb6:	f04f 0800 	mov.w	r8, #0
 8000cba:	782b      	ldrb	r3, [r5, #0]
 8000cbc:	4598      	cmp	r8, r3
 8000cbe:	d218      	bcs.n	8000cf2 <TM_ILI9341_Putc+0x7a>
			if ((b << j) & 0x8000) {
 8000cc0:	fa0b f308 	lsl.w	r3, fp, r8
 8000cc4:	041b      	lsls	r3, r3, #16
 8000cc6:	d505      	bpl.n	8000cd4 <TM_ILI9341_Putc+0x5c>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 8000cc8:	8839      	ldrh	r1, [r7, #0]
 8000cca:	8820      	ldrh	r0, [r4, #0]
 8000ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000cce:	4431      	add	r1, r6
 8000cd0:	4440      	add	r0, r8
 8000cd2:	e007      	b.n	8000ce4 <TM_ILI9341_Putc+0x6c>
			} else if ((background & ILI9341_TRANSPARENT) == 0) {
 8000cd4:	f1ba 0f00 	cmp.w	sl, #0
 8000cd8:	db08      	blt.n	8000cec <TM_ILI9341_Putc+0x74>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), background);
 8000cda:	8839      	ldrh	r1, [r7, #0]
 8000cdc:	8820      	ldrh	r0, [r4, #0]
 8000cde:	4431      	add	r1, r6
 8000ce0:	4440      	add	r0, r8
 8000ce2:	4652      	mov	r2, sl
 8000ce4:	b289      	uxth	r1, r1
 8000ce6:	b280      	uxth	r0, r0
 8000ce8:	f7ff fdce 	bl	8000888 <TM_ILI9341_DrawPixel>
		ILI9341_y += font->FontHeight;
		ILI9341_x = 0;
	}
	for (i = 0; i < font->FontHeight; i++) {
		b = font->data[(c - 32) * font->FontHeight + i];
		for (j = 0; j < font->FontWidth; j++) {
 8000cec:	f108 0801 	add.w	r8, r8, #1
 8000cf0:	e7e3      	b.n	8000cba <TM_ILI9341_Putc+0x42>
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.Width) {
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
		ILI9341_x = 0;
	}
	for (i = 0; i < font->FontHeight; i++) {
 8000cf2:	3601      	adds	r6, #1
 8000cf4:	e7d7      	b.n	8000ca6 <TM_ILI9341_Putc+0x2e>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), background);
			}
		}
	}
	/* Go to new X location */
	ILI9341_x += font->FontWidth;
 8000cf6:	782a      	ldrb	r2, [r5, #0]
 8000cf8:	8823      	ldrh	r3, [r4, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	8023      	strh	r3, [r4, #0]
 8000cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d02:	bf00      	nop
 8000d04:	200008e8 	.word	0x200008e8
 8000d08:	200008fc 	.word	0x200008fc
 8000d0c:	200008ec 	.word	0x200008ec

08000d10 <TM_ILI9341_Puts>:
		240, 320, 0, 0
	);
	//memcpy((uint8_t *)(ILI9341_FRAME_BUFFER + ILI9341_FRAME_OFFSET), (uint8_t *)(ILI9341_FRAME_BUFFER), ILI9341_PIXEL * 2);
}

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8000d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d14:	469a      	mov	sl, r3
	uint16_t startX = x;
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 8000d16:	4d19      	ldr	r5, [pc, #100]	; (8000d7c <TM_ILI9341_Puts+0x6c>)
	ILI9341_y = y;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <TM_ILI9341_Puts+0x70>)
		240, 320, 0, 0
	);
	//memcpy((uint8_t *)(ILI9341_FRAME_BUFFER + ILI9341_FRAME_OFFSET), (uint8_t *)(ILI9341_FRAME_BUFFER), ILI9341_PIXEL * 2);
}

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8000d1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000d1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	uint16_t startX = x;
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 8000d1e:	8028      	strh	r0, [r5, #0]
		240, 320, 0, 0
	);
	//memcpy((uint8_t *)(ILI9341_FRAME_BUFFER + ILI9341_FRAME_OFFSET), (uint8_t *)(ILI9341_FRAME_BUFFER), ILI9341_PIXEL * 2);
}

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8000d20:	4681      	mov	r9, r0
 8000d22:	4614      	mov	r4, r2
	uint16_t startX = x;
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
	ILI9341_y = y;
 8000d24:	8019      	strh	r1, [r3, #0]
 8000d26:	4698      	mov	r8, r3
		/* New line */
		if (*str == '\n') {
			ILI9341_y += font->FontHeight + 1;
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
				ILI9341_x = 0;
 8000d28:	f04f 0b00 	mov.w	fp, #0
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
	ILI9341_y = y;
	
	while (*str) {
 8000d2c:	7822      	ldrb	r2, [r4, #0]
 8000d2e:	b30a      	cbz	r2, 8000d74 <TM_ILI9341_Puts+0x64>
		/* New line */
		if (*str == '\n') {
 8000d30:	2a0a      	cmp	r2, #10
 8000d32:	f104 0101 	add.w	r1, r4, #1
 8000d36:	d111      	bne.n	8000d5c <TM_ILI9341_Puts+0x4c>
			ILI9341_y += font->FontHeight + 1;
 8000d38:	f8b8 3000 	ldrh.w	r3, [r8]
 8000d3c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	f8a8 3000 	strh.w	r3, [r8]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8000d48:	7863      	ldrb	r3, [r4, #1]
 8000d4a:	2b0d      	cmp	r3, #13
				ILI9341_x = 0;
				str++;
 8000d4c:	bf06      	itte	eq
 8000d4e:	460c      	moveq	r4, r1
		/* New line */
		if (*str == '\n') {
			ILI9341_y += font->FontHeight + 1;
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
				ILI9341_x = 0;
 8000d50:	f8a5 b000 	strheq.w	fp, [r5]
				str++;
			} else {
				ILI9341_x = startX;
 8000d54:	f8a5 9000 	strhne.w	r9, [r5]
			}
			str++;
 8000d58:	3401      	adds	r4, #1
			continue;
 8000d5a:	e7e7      	b.n	8000d2c <TM_ILI9341_Puts+0x1c>
		} else if (*str == '\r') {
 8000d5c:	2a0d      	cmp	r2, #13
			str++;
 8000d5e:	460c      	mov	r4, r1
			} else {
				ILI9341_x = startX;
			}
			str++;
			continue;
		} else if (*str == '\r') {
 8000d60:	d0e4      	beq.n	8000d2c <TM_ILI9341_Puts+0x1c>
			str++;
			continue;
		}
		
		/* Put character */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 8000d62:	f8b8 1000 	ldrh.w	r1, [r8]
 8000d66:	8828      	ldrh	r0, [r5, #0]
 8000d68:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8000d6c:	4653      	mov	r3, sl
 8000d6e:	f7ff ff83 	bl	8000c78 <TM_ILI9341_Putc>
 8000d72:	e7db      	b.n	8000d2c <TM_ILI9341_Puts+0x1c>
	}
}
 8000d74:	b003      	add	sp, #12
 8000d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200008e8 	.word	0x200008e8
 8000d80:	200008fc 	.word	0x200008fc

08000d84 <TM_SDRAM_InitCustomPinsCallback>:
	/* If you need custom implementation, then create this function externally. */
	/* This function here should not be modified */
	
	/* Return 0, lib will use default pins */
	return 0;
}
 8000d84:	2000      	movs	r0, #0
 8000d86:	4770      	bx	lr

08000d88 <TM_SDRAM_Init>:
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)

/* Internal functions */
static void TM_SDRAM_InitPins(void);

uint8_t TM_SDRAM_Init(void) {
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
	volatile uint32_t timeout = SDRAM_TIMEOUT;
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 8000d8a:	4f78      	ldr	r7, [pc, #480]	; (8000f6c <TM_SDRAM_Init+0x1e4>)
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)

/* Internal functions */
static void TM_SDRAM_InitPins(void);

uint8_t TM_SDRAM_Init(void) {
 8000d8c:	b09b      	sub	sp, #108	; 0x6c
	FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
	volatile uint32_t timeout = SDRAM_TIMEOUT;
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 8000d8e:	783c      	ldrb	r4, [r7, #0]

uint8_t TM_SDRAM_Init(void) {
	FMC_SDRAMInitTypeDef FMC_SDRAMInitStructure;
	FMC_SDRAMTimingInitTypeDef FMC_SDRAMTimingInitStructure;
	FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8000d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d94:	9303      	str	r3, [sp, #12]
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	f040 80e3 	bne.w	8000f62 <TM_SDRAM_Init+0x1da>
	return 0;
}

static void TM_SDRAM_InitPins(void) {
	/* Try to initialize from user */
	if (TM_SDRAM_InitCustomPinsCallback()) {
 8000d9c:	f7ff fff2 	bl	8000d84 <TM_SDRAM_InitCustomPinsCallback>
 8000da0:	bbc0      	cbnz	r0, 8000e14 <TM_SDRAM_Init+0x8c>
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
	/* GPIOI pins */
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
#else
	/* GPIOB pins */
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
 8000da2:	2503      	movs	r5, #3
 8000da4:	260c      	movs	r6, #12
 8000da6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000daa:	4623      	mov	r3, r4
 8000dac:	4622      	mov	r2, r4
 8000dae:	2160      	movs	r1, #96	; 0x60
 8000db0:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8000db4:	e88d 0060 	stmia.w	sp, {r5, r6}
 8000db8:	f000 f9d1 	bl	800115e <TM_GPIO_InitAlternate>
	/* GPIOC pins */
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_0, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	4622      	mov	r2, r4
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	486b      	ldr	r0, [pc, #428]	; (8000f70 <TM_SDRAM_Init+0x1e8>)
 8000dc4:	e88d 0060 	stmia.w	sp, {r5, r6}
 8000dc8:	f000 f9c9 	bl	800115e <TM_GPIO_InitAlternate>
	/* GPIOD pins */
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
 8000dcc:	4623      	mov	r3, r4
 8000dce:	4622      	mov	r2, r4
 8000dd0:	f24c 7103 	movw	r1, #50947	; 0xc703
 8000dd4:	4867      	ldr	r0, [pc, #412]	; (8000f74 <TM_SDRAM_Init+0x1ec>)
 8000dd6:	e88d 0060 	stmia.w	sp, {r5, r6}
 8000dda:	f000 f9c0 	bl	800115e <TM_GPIO_InitAlternate>
	/* GPIOE pins */
	TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
 8000dde:	4623      	mov	r3, r4
 8000de0:	4622      	mov	r2, r4
 8000de2:	f64f 7183 	movw	r1, #65411	; 0xff83
 8000de6:	4864      	ldr	r0, [pc, #400]	; (8000f78 <TM_SDRAM_Init+0x1f0>)
 8000de8:	e88d 0060 	stmia.w	sp, {r5, r6}
 8000dec:	f000 f9b7 	bl	800115e <TM_GPIO_InitAlternate>
	/* GPIOF pins */
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
 8000df0:	4623      	mov	r3, r4
 8000df2:	4622      	mov	r2, r4
 8000df4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8000df8:	4860      	ldr	r0, [pc, #384]	; (8000f7c <TM_SDRAM_Init+0x1f4>)
 8000dfa:	e88d 0060 	stmia.w	sp, {r5, r6}
 8000dfe:	f000 f9ae 	bl	800115e <TM_GPIO_InitAlternate>
	/* GPIOG pins */
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_FMC);
 8000e02:	e88d 0060 	stmia.w	sp, {r5, r6}
 8000e06:	4623      	mov	r3, r4
 8000e08:	4622      	mov	r2, r4
 8000e0a:	f248 1133 	movw	r1, #33075	; 0x8133
 8000e0e:	485c      	ldr	r0, [pc, #368]	; (8000f80 <TM_SDRAM_Init+0x1f8>)
 8000e10:	f000 f9a5 	bl	800115e <TM_GPIO_InitAlternate>
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
	
	/* Enable FMC clock */
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8000e14:	4a5b      	ldr	r2, [pc, #364]	; (8000f84 <TM_SDRAM_Init+0x1fc>)
 8000e16:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6393      	str	r3, [r2, #56]	; 0x38
	/* FMC SDRAM device initialization sequence --------------------------------*/ 
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay		= 2;      
 8000e1e:	2302      	movs	r3, #2
 8000e20:	9308      	str	r3, [sp, #32]
	/* TRAS: min=42ns (4x11.10ns) max=120k (ns) */
	FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime		= 4;
	/* TRC:  min=70 (7x11.10ns) */        
	FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay			= 7;         
	/* TWR:  min=1+ 7ns (1+1x11.10ns) */
	FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime		= 2;      
 8000e22:	930c      	str	r3, [sp, #48]	; 0x30
	/* TRP:  20ns => 2x11.10ns */
	FMC_SDRAMTimingInitStructure.FMC_RPDelay				= 2;                
 8000e24:	930d      	str	r3, [sp, #52]	; 0x34
	/* TRCD: 20ns => 2x11.10ns */
	FMC_SDRAMTimingInitStructure.FMC_RCDDelay				= 2;
 8000e26:	930e      	str	r3, [sp, #56]	; 0x38
	FMC_SDRAMInitStructure.FMC_Bank 						= SDRAM_BANK;
	/* Row addressing: [7:0] */
	FMC_SDRAMInitStructure.FMC_ColumnBitsNumber 			= FMC_ColumnBits_Number_8b;
	/* Column addressing: [11:0] */
	FMC_SDRAMInitStructure.FMC_RowBitsNumber      			= SDRAM_ROWBITS_NUMBER;
	FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth  			= SDRAM_MEMORY_WIDTH;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	9312      	str	r3, [sp, #72]	; 0x48
	FMC_SDRAMInitStructure.FMC_InternalBankNumber 			= FMC_InternalBank_Number_4;
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	9313      	str	r3, [sp, #76]	; 0x4c
	/* CL: Cas Latency = 3 clock cycles */
	FMC_SDRAMInitStructure.FMC_CASLatency              	    = FMC_CAS_Latency_3;
 8000e30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e34:	9314      	str	r3, [sp, #80]	; 0x50
	FMC_SDRAMInitStructure.FMC_WriteProtection 				= FMC_Write_Protection_Disable;
	FMC_SDRAMInitStructure.FMC_SDClockPeriod 				= FMC_SDClock_Period_2;
 8000e36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e3a:	9316      	str	r3, [sp, #88]	; 0x58
	FMC_SDRAMInitStructure.FMC_ReadBurst 					= SDRAM_READ_BURST_STATE;
	FMC_SDRAMInitStructure.FMC_ReadPipeDelay 				= FMC_ReadPipe_Delay_1;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	
	
	/* FMC SDRAM control configuration */
	FMC_SDRAMInitStructure.FMC_Bank 						= SDRAM_BANK;
	/* Row addressing: [7:0] */
	FMC_SDRAMInitStructure.FMC_ColumnBitsNumber 			= FMC_ColumnBits_Number_8b;
 8000e40:	2500      	movs	r5, #0
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay		= 2;      
	/* TXSR: min=70ns (7x11.10ns) */
	FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay	= 7;
 8000e42:	2107      	movs	r1, #7
	/* TRAS: min=42ns (4x11.10ns) max=120k (ns) */
	FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime		= 4;
 8000e44:	2204      	movs	r2, #4
	/* TRCD: 20ns => 2x11.10ns */
	FMC_SDRAMTimingInitStructure.FMC_RCDDelay				= 2;
	
	
	/* FMC SDRAM control configuration */
	FMC_SDRAMInitStructure.FMC_Bank 						= SDRAM_BANK;
 8000e46:	2601      	movs	r6, #1
	/* CL: Cas Latency = 3 clock cycles */
	FMC_SDRAMInitStructure.FMC_CASLatency              	    = FMC_CAS_Latency_3;
	FMC_SDRAMInitStructure.FMC_WriteProtection 				= FMC_Write_Protection_Disable;
	FMC_SDRAMInitStructure.FMC_SDClockPeriod 				= FMC_SDClock_Period_2;
	FMC_SDRAMInitStructure.FMC_ReadBurst 					= SDRAM_READ_BURST_STATE;
	FMC_SDRAMInitStructure.FMC_ReadPipeDelay 				= FMC_ReadPipe_Delay_1;
 8000e48:	9318      	str	r3, [sp, #96]	; 0x60
	FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct 			= &FMC_SDRAMTimingInitStructure;
	
	/* FMC SDRAM bank initialization */
	FMC_SDRAMInit(&FMC_SDRAMInitStructure);
 8000e4a:	a80f      	add	r0, sp, #60	; 0x3c
	FMC_SDRAMInitStructure.FMC_CASLatency              	    = FMC_CAS_Latency_3;
	FMC_SDRAMInitStructure.FMC_WriteProtection 				= FMC_Write_Protection_Disable;
	FMC_SDRAMInitStructure.FMC_SDClockPeriod 				= FMC_SDClock_Period_2;
	FMC_SDRAMInitStructure.FMC_ReadBurst 					= SDRAM_READ_BURST_STATE;
	FMC_SDRAMInitStructure.FMC_ReadPipeDelay 				= FMC_ReadPipe_Delay_1;
	FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct 			= &FMC_SDRAMTimingInitStructure;
 8000e4c:	ab08      	add	r3, sp, #32
 8000e4e:	9319      	str	r3, [sp, #100]	; 0x64
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay		= 2;      
	/* TXSR: min=70ns (7x11.10ns) */
	FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay	= 7;
 8000e50:	9109      	str	r1, [sp, #36]	; 0x24
	/* TRAS: min=42ns (4x11.10ns) max=120k (ns) */
	FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime		= 4;
 8000e52:	920a      	str	r2, [sp, #40]	; 0x28
	/* TRC:  min=70 (7x11.10ns) */        
	FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay			= 7;         
 8000e54:	910b      	str	r1, [sp, #44]	; 0x2c
	/* TRCD: 20ns => 2x11.10ns */
	FMC_SDRAMTimingInitStructure.FMC_RCDDelay				= 2;
	
	
	/* FMC SDRAM control configuration */
	FMC_SDRAMInitStructure.FMC_Bank 						= SDRAM_BANK;
 8000e56:	960f      	str	r6, [sp, #60]	; 0x3c
	/* Row addressing: [7:0] */
	FMC_SDRAMInitStructure.FMC_ColumnBitsNumber 			= FMC_ColumnBits_Number_8b;
 8000e58:	9510      	str	r5, [sp, #64]	; 0x40
	/* Column addressing: [11:0] */
	FMC_SDRAMInitStructure.FMC_RowBitsNumber      			= SDRAM_ROWBITS_NUMBER;
 8000e5a:	9211      	str	r2, [sp, #68]	; 0x44
	FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth  			= SDRAM_MEMORY_WIDTH;
	FMC_SDRAMInitStructure.FMC_InternalBankNumber 			= FMC_InternalBank_Number_4;
	/* CL: Cas Latency = 3 clock cycles */
	FMC_SDRAMInitStructure.FMC_CASLatency              	    = FMC_CAS_Latency_3;
	FMC_SDRAMInitStructure.FMC_WriteProtection 				= FMC_Write_Protection_Disable;
 8000e5c:	9515      	str	r5, [sp, #84]	; 0x54
	FMC_SDRAMInitStructure.FMC_SDClockPeriod 				= FMC_SDClock_Period_2;
	FMC_SDRAMInitStructure.FMC_ReadBurst 					= SDRAM_READ_BURST_STATE;
 8000e5e:	9517      	str	r5, [sp, #92]	; 0x5c
	FMC_SDRAMInitStructure.FMC_ReadPipeDelay 				= FMC_ReadPipe_Delay_1;
	FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct 			= &FMC_SDRAMTimingInitStructure;
	
	/* FMC SDRAM bank initialization */
	FMC_SDRAMInit(&FMC_SDRAMInitStructure);
 8000e60:	f000 fcb0 	bl	80017c4 <FMC_SDRAMInit>
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	FMC_SDRAMCommandStructure.FMC_CommandMode				= FMC_Command_Mode_CLK_Enabled;
	FMC_SDRAMCommandStructure.FMC_CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
 8000e64:	2308      	movs	r3, #8
 8000e66:	9305      	str	r3, [sp, #20]
	FMC_SDRAMInit(&FMC_SDRAMInitStructure);
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	FMC_SDRAMCommandStructure.FMC_CommandMode				= FMC_Command_Mode_CLK_Enabled;
 8000e68:	9604      	str	r6, [sp, #16]
	FMC_SDRAMCommandStructure.FMC_CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber 		= 1;
 8000e6a:	9606      	str	r6, [sp, #24]
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= 0;
 8000e6c:	9507      	str	r5, [sp, #28]
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
 8000e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000e72:	2120      	movs	r1, #32
 8000e74:	2001      	movs	r0, #1
		timeout--;
 8000e76:	9303      	str	r3, [sp, #12]
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber 		= 1;
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= 0;
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000e78:	f000 fd36 	bl	80018e8 <FMC_GetFlagStatus>
 8000e7c:	b120      	cbz	r0, 8000e88 <TM_SDRAM_Init+0x100>
 8000e7e:	9b03      	ldr	r3, [sp, #12]
 8000e80:	b113      	cbz	r3, 8000e88 <TM_SDRAM_Init+0x100>
		timeout--;
 8000e82:	9b03      	ldr	r3, [sp, #12]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	e7f4      	b.n	8000e72 <TM_SDRAM_Init+0xea>
	}
	
	/* Send the command */
	FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8000e88:	a804      	add	r0, sp, #16
 8000e8a:	f000 fd15 	bl	80018b8 <FMC_SDRAMCmdConfig>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0x110;
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	; (8000f88 <TM_SDRAM_Init+0x200>)
 8000e90:	9303      	str	r3, [sp, #12]
	while (timeout--);
 8000e92:	9b03      	ldr	r3, [sp, #12]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	9203      	str	r2, [sp, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1fa      	bne.n	8000e92 <TM_SDRAM_Init+0x10a>
	
	/* Configure a PALL (precharge all) command */ 
	FMC_SDRAMCommandStructure.FMC_CommandMode          		= FMC_Command_Mode_PALL;
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	9204      	str	r2, [sp, #16]
	FMC_SDRAMCommandStructure.FMC_CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	9205      	str	r2, [sp, #20]
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber      	= 1;
 8000ea4:	2201      	movs	r2, #1
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= 0;
 8000ea6:	9307      	str	r3, [sp, #28]
	while (timeout--);
	
	/* Configure a PALL (precharge all) command */ 
	FMC_SDRAMCommandStructure.FMC_CommandMode          		= FMC_Command_Mode_PALL;
	FMC_SDRAMCommandStructure.FMC_CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber      	= 1;
 8000ea8:	9206      	str	r2, [sp, #24]
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= 0;
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
 8000eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000eae:	2120      	movs	r1, #32
 8000eb0:	2001      	movs	r0, #1
		timeout--;
 8000eb2:	9303      	str	r3, [sp, #12]
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber      	= 1;
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= 0;
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000eb4:	f000 fd18 	bl	80018e8 <FMC_GetFlagStatus>
 8000eb8:	b120      	cbz	r0, 8000ec4 <TM_SDRAM_Init+0x13c>
 8000eba:	9b03      	ldr	r3, [sp, #12]
 8000ebc:	b113      	cbz	r3, 8000ec4 <TM_SDRAM_Init+0x13c>
		timeout--;
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	e7f4      	b.n	8000eae <TM_SDRAM_Init+0x126>
	}
	
	/* Send the command */
	FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8000ec4:	a804      	add	r0, sp, #16
 8000ec6:	f000 fcf7 	bl	80018b8 <FMC_SDRAMCmdConfig>

	/* Configure a Auto-Refresh command */ 
	FMC_SDRAMCommandStructure.FMC_CommandMode            	= FMC_Command_Mode_AutoRefresh;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	9304      	str	r3, [sp, #16]
	FMC_SDRAMCommandStructure.FMC_CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	9305      	str	r3, [sp, #20]
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber      	= 8;
 8000ed2:	9306      	str	r3, [sp, #24]
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9307      	str	r3, [sp, #28]
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
 8000ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000edc:	2120      	movs	r1, #32
 8000ede:	2001      	movs	r0, #1
		timeout--;
 8000ee0:	9303      	str	r3, [sp, #12]
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber      	= 8;
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= 0;
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000ee2:	f000 fd01 	bl	80018e8 <FMC_GetFlagStatus>
 8000ee6:	b120      	cbz	r0, 8000ef2 <TM_SDRAM_Init+0x16a>
 8000ee8:	9b03      	ldr	r3, [sp, #12]
 8000eea:	b113      	cbz	r3, 8000ef2 <TM_SDRAM_Init+0x16a>
		timeout--;
 8000eec:	9b03      	ldr	r3, [sp, #12]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	e7f4      	b.n	8000edc <TM_SDRAM_Init+0x154>
	}
	
	/* Send the command */
	FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8000ef2:	a804      	add	r0, sp, #16
 8000ef4:	f000 fce0 	bl	80018b8 <FMC_SDRAMCmdConfig>
	
	/* Configure a load Mode register command */
	FMC_SDRAMCommandStructure.FMC_CommandMode            	= FMC_Command_Mode_LoadMode;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	9304      	str	r3, [sp, #16]
	FMC_SDRAMCommandStructure.FMC_CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8000efc:	2308      	movs	r3, #8
 8000efe:	9305      	str	r3, [sp, #20]
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber      	= 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	9306      	str	r3, [sp, #24]
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
 8000f04:	f240 2331 	movw	r3, #561	; 0x231
 8000f08:	9307      	str	r3, [sp, #28]
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
 8000f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000f0e:	2120      	movs	r1, #32
 8000f10:	2001      	movs	r0, #1
		timeout--;
 8000f12:	9303      	str	r3, [sp, #12]
	FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber      	= 1;
	FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000f14:	f000 fce8 	bl	80018e8 <FMC_GetFlagStatus>
 8000f18:	b120      	cbz	r0, 8000f24 <TM_SDRAM_Init+0x19c>
 8000f1a:	9b03      	ldr	r3, [sp, #12]
 8000f1c:	b113      	cbz	r3, 8000f24 <TM_SDRAM_Init+0x19c>
		timeout--;
 8000f1e:	9b03      	ldr	r3, [sp, #12]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	e7f4      	b.n	8000f0e <TM_SDRAM_Init+0x186>
	}
	
	/* Send the command */
	FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8000f24:	a804      	add	r0, sp, #16
 8000f26:	f000 fcc7 	bl	80018b8 <FMC_SDRAMCmdConfig>

	/* Set the refresh rate counter */
	/* (7.81 us x Freq) - 20 = (7.81 * 90MHz) - 20 = 683 */
	/* Set the device refresh counter */
	FMC_SetRefreshCount(SDRAM_REFRESH_COUNT);
 8000f2a:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 8000f2e:	f000 fcd3 	bl	80018d8 <FMC_SetRefreshCount>
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
 8000f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000f36:	2120      	movs	r1, #32
 8000f38:	2001      	movs	r0, #1
		timeout--;
 8000f3a:	9303      	str	r3, [sp, #12]
	/* Set the device refresh counter */
	FMC_SetRefreshCount(SDRAM_REFRESH_COUNT);
	
	/* Wait until the SDRAM controller is ready */
	timeout = SDRAM_TIMEOUT;
	while (FMC_GetFlagStatus(SDRAM_BANK, FMC_FLAG_Busy) != RESET && timeout) {
 8000f3c:	f000 fcd4 	bl	80018e8 <FMC_GetFlagStatus>
 8000f40:	b120      	cbz	r0, 8000f4c <TM_SDRAM_Init+0x1c4>
 8000f42:	9b03      	ldr	r3, [sp, #12]
 8000f44:	b113      	cbz	r3, 8000f4c <TM_SDRAM_Init+0x1c4>
		timeout--;
 8000f46:	9b03      	ldr	r3, [sp, #12]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	e7f4      	b.n	8000f36 <TM_SDRAM_Init+0x1ae>
	}
	
	/* Check if everything goes right */
	/* Write 0x45 at location 0x50 and check if result is the same on read operation */
	TM_SDRAM_Write8(0x50, 0x45);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <TM_SDRAM_Init+0x204>)
 8000f4e:	2245      	movs	r2, #69	; 0x45
 8000f50:	701a      	strb	r2, [r3, #0]
	
	/* Read and check */
	if (TM_SDRAM_Read8(0x50) == 0x45) {
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4293      	cmp	r3, r2
		/* Initialized OK */
		initialized = 1;
 8000f56:	bf0b      	itete	eq
 8000f58:	2401      	moveq	r4, #1
		/* Initialized OK */
		return 1;
	}
	
	/* Not initialized OK */
	initialized = 0;
 8000f5a:	2300      	movne	r3, #0
	TM_SDRAM_Write8(0x50, 0x45);
	
	/* Read and check */
	if (TM_SDRAM_Read8(0x50) == 0x45) {
		/* Initialized OK */
		initialized = 1;
 8000f5c:	703c      	strbeq	r4, [r7, #0]
		/* Initialized OK */
		return 1;
	}
	
	/* Not initialized OK */
	initialized = 0;
 8000f5e:	703b      	strbne	r3, [r7, #0]
	
	/* Not ok */
	return 0;
 8000f60:	e000      	b.n	8000f64 <TM_SDRAM_Init+0x1dc>
	volatile uint32_t timeout = SDRAM_TIMEOUT;
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
		return 1;
 8000f62:	2401      	movs	r4, #1
	/* Not initialized OK */
	initialized = 0;
	
	/* Not ok */
	return 0;
}
 8000f64:	4620      	mov	r0, r4
 8000f66:	b01b      	add	sp, #108	; 0x6c
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000874 	.word	0x20000874
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40021400 	.word	0x40021400
 8000f80:	40021800 	.word	0x40021800
 8000f84:	40023800 	.word	0x40023800
 8000f88:	010ffef0 	.word	0x010ffef0
 8000f8c:	d0000050 	.word	0xd0000050

08000f90 <TimingDelay_Decrement>:
#else
void SysTick_Handler(void) {
	uint8_t i;
#endif
	
	TM_Time++;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <TimingDelay_Decrement+0x54>)
 8000f92:	6813      	ldr	r3, [r2, #0]
 8000f94:	3301      	adds	r3, #1
#if defined(TM_DELAY_TIM)
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	uint8_t i;
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
 8000f96:	b570      	push	{r4, r5, r6, lr}
#else
void SysTick_Handler(void) {
	uint8_t i;
#endif
	
	TM_Time++;
 8000f98:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <TimingDelay_Decrement+0x58>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	b112      	cbz	r2, 8000fa6 <TimingDelay_Decrement+0x16>
		TM_Time2--;
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 8000fa6:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8000faa:	4e10      	ldr	r6, [pc, #64]	; (8000fec <TimingDelay_Decrement+0x5c>)
 8000fac:	2500      	movs	r5, #0
 8000fae:	7833      	ldrb	r3, [r6, #0]
 8000fb0:	b2ec      	uxtb	r4, r5
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d915      	bls.n	8000fe2 <TimingDelay_Decrement+0x52>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000fb6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000fba:	6863      	ldr	r3, [r4, #4]
	TM_DELAY_1msHandler();
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 8000fbc:	b17b      	cbz	r3, 8000fde <TimingDelay_Decrement+0x4e>
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8000fbe:	7b1a      	ldrb	r2, [r3, #12]
 8000fc0:	b16a      	cbz	r2, 8000fde <TimingDelay_Decrement+0x4e>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8000fc2:	689a      	ldr	r2, [r3, #8]
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8000fc4:	b15a      	cbz	r2, 8000fde <TimingDelay_Decrement+0x4e>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8000fc6:	3a01      	subs	r2, #1
 8000fc8:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8000fca:	b942      	cbnz	r2, 8000fde <TimingDelay_Decrement+0x4e>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	6958      	ldr	r0, [r3, #20]
 8000fd0:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	609a      	str	r2, [r3, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	b902      	cbnz	r2, 8000fde <TimingDelay_Decrement+0x4e>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 8000fdc:	731a      	strb	r2, [r3, #12]
 8000fde:	3501      	adds	r5, #1
 8000fe0:	e7e5      	b.n	8000fae <TimingDelay_Decrement+0x1e>
				}
			}
		}
	}
}
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
 8000fe4:	20000894 	.word	0x20000894
 8000fe8:	20000898 	.word	0x20000898
 8000fec:	20000878 	.word	0x20000878

08000ff0 <TM_DELAY_Init>:
void TM_DELAY_Init(void) {	
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <TM_DELAY_Init+0x3c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001002:	d212      	bcs.n	800102a <TM_DELAY_Init+0x3a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001004:	490a      	ldr	r1, [pc, #40]	; (8001030 <TM_DELAY_Init+0x40>)
 8001006:	604b      	str	r3, [r1, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <TM_DELAY_Init+0x44>)
 800100a:	20f0      	movs	r0, #240	; 0xf0
 800100c:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001010:	2300      	movs	r3, #0
 8001012:	608b      	str	r3, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001014:	2307      	movs	r3, #7
 8001016:	600b      	str	r3, [r1, #0]
		while (1);
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <TM_DELAY_Init+0x48>)
 800101a:	fbb2 f2f3 	udiv	r2, r2, r3
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <TM_DELAY_Init+0x4c>)
 8001020:	601a      	str	r2, [r3, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <TM_DELAY_Init+0x50>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	e7fe      	b.n	800102a <TM_DELAY_Init+0x3a>
 800102c:	20000430 	.word	0x20000430
 8001030:	e000e010 	.word	0xe000e010
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	006acfc0 	.word	0x006acfc0
 800103c:	20000900 	.word	0x20000900
 8001040:	20000890 	.word	0x20000890

08001044 <TM_GPIO_INT_EnableClock>:
}

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8001044:	4906      	ldr	r1, [pc, #24]	; (8001060 <TM_GPIO_INT_EnableClock+0x1c>)
 8001046:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 800104a:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
 800104e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001050:	f3c0 208f 	ubfx	r0, r0, #10, #16
 8001054:	2201      	movs	r2, #1
 8001056:	fa02 f000 	lsl.w	r0, r2, r0
 800105a:	4303      	orrs	r3, r0
 800105c:	630b      	str	r3, [r1, #48]	; 0x30
 800105e:	4770      	bx	lr
 8001060:	40023800 	.word	0x40023800

08001064 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001068:	b085      	sub	sp, #20
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800106a:	f100 463f 	add.w	r6, r0, #3204448256	; 0xbf000000
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800106e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8001072:	9402      	str	r4, [sp, #8]
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001074:	f506 067e 	add.w	r6, r6, #16646144	; 0xfe0000
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001078:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800107c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8001124 <TM_GPIO_INT_Init+0xc0>
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001080:	9301      	str	r3, [sp, #4]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001082:	f102 3eff 	add.w	lr, r2, #4294967295
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8001086:	9403      	str	r4, [sp, #12]
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8001088:	2500      	movs	r5, #0
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800108a:	f3c6 2687 	ubfx	r6, r6, #10, #8
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800108e:	f04f 0b03 	mov.w	fp, #3
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8001092:	fa5f fe8e 	uxtb.w	lr, lr
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8001096:	fa41 f405 	asr.w	r4, r1, r5
 800109a:	07e3      	lsls	r3, r4, #31
 800109c:	d53b      	bpl.n	8001116 <TM_GPIO_INT_Init+0xb2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800109e:	2301      	movs	r3, #1
 80010a0:	f839 4016 	ldrh.w	r4, [r9, r6, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80010a4:	f8d0 800c 	ldr.w	r8, [r0, #12]
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80010a8:	fa03 fa05 	lsl.w	sl, r3, r5
 80010ac:	ea4a 0404 	orr.w	r4, sl, r4
 80010b0:	f829 4016 	strh.w	r4, [r9, r6, lsl #1]
 80010b4:	fa05 f403 	lsl.w	r4, r5, r3
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80010b8:	fa0b f704 	lsl.w	r7, fp, r4
 80010bc:	9b02      	ldr	r3, [sp, #8]
 80010be:	43ff      	mvns	r7, r7
 80010c0:	ea07 0808 	and.w	r8, r7, r8
 80010c4:	fa03 fc04 	lsl.w	ip, r3, r4
 80010c8:	ea48 0c0c 	orr.w	ip, r8, ip
 80010cc:	f8c0 c00c 	str.w	ip, [r0, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80010d0:	f8d0 8000 	ldr.w	r8, [r0]
 80010d4:	fa02 fc04 	lsl.w	ip, r2, r4
 80010d8:	ea08 0807 	and.w	r8, r8, r7
 80010dc:	ea48 0c0c 	orr.w	ip, r8, ip
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80010e0:	f1be 0f01 	cmp.w	lr, #1
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80010e4:	f8c0 c000 	str.w	ip, [r0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80010e8:	d815      	bhi.n	8001116 <TM_GPIO_INT_Init+0xb2>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80010ea:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80010ee:	9b01      	ldr	r3, [sp, #4]
 80010f0:	ea2c 0a0a 	bic.w	sl, ip, sl
 80010f4:	fa03 fc05 	lsl.w	ip, r3, r5
 80010f8:	fa1f fc8c 	uxth.w	ip, ip
 80010fc:	ea4a 0a0c 	orr.w	sl, sl, ip
 8001100:	f8c0 a004 	str.w	sl, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8001104:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8001108:	9b03      	ldr	r3, [sp, #12]
 800110a:	ea07 070c 	and.w	r7, r7, ip
 800110e:	fa03 f404 	lsl.w	r4, r3, r4
 8001112:	4327      	orrs	r7, r4
 8001114:	6087      	str	r7, [r0, #8]
 8001116:	3501      	adds	r5, #1
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001118:	2d10      	cmp	r5, #16
 800111a:	d1bc      	bne.n	8001096 <TM_GPIO_INT_Init+0x32>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 800111c:	b005      	add	sp, #20
 800111e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001122:	bf00      	nop
 8001124:	2000089c 	.word	0x2000089c

08001128 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8001128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800112c:	4605      	mov	r5, r0
 800112e:	4616      	mov	r6, r2
 8001130:	461f      	mov	r7, r3
 8001132:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8001136:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	/* Check input */
	if (GPIO_Pin == 0x00) {
 800113a:	460c      	mov	r4, r1
 800113c:	b169      	cbz	r1, 800115a <TM_GPIO_Init+0x32>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 800113e:	f7ff ff81 	bl	8001044 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001142:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001146:	f8cd 8020 	str.w	r8, [sp, #32]
 800114a:	463b      	mov	r3, r7
 800114c:	4632      	mov	r2, r6
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
}
 8001152:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8001156:	f7ff bf85 	b.w	8001064 <TM_GPIO_INT_Init>
 800115a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800115e <TM_GPIO_InitAlternate>:
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800115e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001162:	4605      	mov	r5, r0
 8001164:	4616      	mov	r6, r2
 8001166:	461f      	mov	r7, r3
 8001168:	f89d 8020 	ldrb.w	r8, [sp, #32]
 800116c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8001170:	460c      	mov	r4, r1
 8001172:	b329      	cbz	r1, 80011c0 <TM_GPIO_InitAlternate+0x62>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8001174:	f7ff ff66 	bl	8001044 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8001178:	2300      	movs	r3, #0
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800117a:	f04f 0e0f 	mov.w	lr, #15
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800117e:	fa44 f203 	asr.w	r2, r4, r3
 8001182:	07d2      	lsls	r2, r2, #31
 8001184:	d50e      	bpl.n	80011a4 <TM_GPIO_InitAlternate+0x46>
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	eb05 0282 	add.w	r2, r5, r2, lsl #2
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800118c:	f003 0007 	and.w	r0, r3, #7
 8001190:	6a11      	ldr	r1, [r2, #32]
 8001192:	0080      	lsls	r0, r0, #2
 8001194:	fa0e fc00 	lsl.w	ip, lr, r0
 8001198:	ea21 010c 	bic.w	r1, r1, ip
 800119c:	fa09 f000 	lsl.w	r0, r9, r0
 80011a0:	4308      	orrs	r0, r1
 80011a2:	6210      	str	r0, [r2, #32]
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80011a4:	3301      	adds	r3, #1
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d1e9      	bne.n	800117e <TM_GPIO_InitAlternate+0x20>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80011aa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80011ae:	9708      	str	r7, [sp, #32]
 80011b0:	4633      	mov	r3, r6
 80011b2:	4621      	mov	r1, r4
 80011b4:	4628      	mov	r0, r5
 80011b6:	2202      	movs	r2, #2
}
 80011b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80011bc:	f7ff bf52 	b.w	8001064 <TM_GPIO_INT_Init>
 80011c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080011c4 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		dataIn[i] = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) {
 80011c4:	4770      	bx	lr
	...

080011c8 <TM_SPI1_INT_InitPins>:
	SPIx->CR1 |= SPI_CR1_SPE;
}

/* Private functions */
#ifdef USE_SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80011c8:	b507      	push	{r0, r1, r2, lr}
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 80011ca:	4603      	mov	r3, r0
 80011cc:	b938      	cbnz	r0, 80011de <TM_SPI1_INT_InitPins+0x16>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 80011ce:	2103      	movs	r1, #3
 80011d0:	2205      	movs	r2, #5
 80011d2:	e88d 0006 	stmia.w	sp, {r1, r2}
 80011d6:	4602      	mov	r2, r0
 80011d8:	21e0      	movs	r1, #224	; 0xe0
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <TM_SPI1_INT_InitPins+0x44>)
 80011dc:	e009      	b.n	80011f2 <TM_SPI1_INT_InitPins+0x2a>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 80011de:	2801      	cmp	r0, #1
 80011e0:	d10a      	bne.n	80011f8 <TM_SPI1_INT_InitPins+0x30>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI1);
 80011e2:	2203      	movs	r2, #3
 80011e4:	2305      	movs	r3, #5
 80011e6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80011ea:	4809      	ldr	r0, [pc, #36]	; (8001210 <TM_SPI1_INT_InitPins+0x48>)
 80011ec:	2300      	movs	r3, #0
 80011ee:	461a      	mov	r2, r3
 80011f0:	2138      	movs	r1, #56	; 0x38
 80011f2:	f7ff ffb4 	bl	800115e <TM_GPIO_InitAlternate>
 80011f6:	e005      	b.n	8001204 <TM_SPI1_INT_InitPins+0x3c>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80011f8:	2803      	cmp	r0, #3
 80011fa:	d103      	bne.n	8001204 <TM_SPI1_INT_InitPins+0x3c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AF_SPI1);
 80011fc:	2105      	movs	r1, #5
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <TM_SPI1_INT_InitPins+0x4c>)
 8001200:	f7ff ffe0 	bl	80011c4 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001204:	b003      	add	sp, #12
 8001206:	f85d fb04 	ldr.w	pc, [sp], #4
 800120a:	bf00      	nop
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40013000 	.word	0x40013000

08001218 <TM_SPI2_INT_InitPins>:
#endif

#ifdef USE_SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001218:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 800121a:	4604      	mov	r4, r0
 800121c:	b988      	cbnz	r0, 8001242 <TM_SPI2_INT_InitPins+0x2a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 800121e:	2503      	movs	r5, #3
 8001220:	2605      	movs	r6, #5
 8001222:	4603      	mov	r3, r0
 8001224:	4602      	mov	r2, r0
 8001226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800122a:	4816      	ldr	r0, [pc, #88]	; (8001284 <TM_SPI2_INT_InitPins+0x6c>)
 800122c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8001230:	f7ff ff95 	bl	800115e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001234:	e88d 0060 	stmia.w	sp, {r5, r6}
 8001238:	4623      	mov	r3, r4
 800123a:	4622      	mov	r2, r4
 800123c:	210c      	movs	r1, #12
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <TM_SPI2_INT_InitPins+0x70>)
 8001240:	e00a      	b.n	8001258 <TM_SPI2_INT_InitPins+0x40>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001242:	2801      	cmp	r0, #1
 8001244:	d10b      	bne.n	800125e <TM_SPI2_INT_InitPins+0x46>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001246:	2103      	movs	r1, #3
 8001248:	2305      	movs	r3, #5
 800124a:	e88d 000a 	stmia.w	sp, {r1, r3}
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <TM_SPI2_INT_InitPins+0x6c>)
 8001250:	2300      	movs	r3, #0
 8001252:	461a      	mov	r2, r3
 8001254:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001258:	f7ff ff81 	bl	800115e <TM_GPIO_InitAlternate>
 800125c:	e010      	b.n	8001280 <TM_SPI2_INT_InitPins+0x68>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 800125e:	2802      	cmp	r0, #2
 8001260:	d108      	bne.n	8001274 <TM_SPI2_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI2);
 8001262:	2203      	movs	r2, #3
 8001264:	2305      	movs	r3, #5
 8001266:	e88d 000c 	stmia.w	sp, {r2, r3}
 800126a:	2300      	movs	r3, #0
 800126c:	461a      	mov	r2, r3
 800126e:	210d      	movs	r1, #13
 8001270:	4806      	ldr	r0, [pc, #24]	; (800128c <TM_SPI2_INT_InitPins+0x74>)
 8001272:	e7f1      	b.n	8001258 <TM_SPI2_INT_InitPins+0x40>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001274:	2803      	cmp	r0, #3
 8001276:	d103      	bne.n	8001280 <TM_SPI2_INT_InitPins+0x68>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AF_SPI2);
 8001278:	2105      	movs	r1, #5
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <TM_SPI2_INT_InitPins+0x78>)
 800127c:	f7ff ffa2 	bl	80011c4 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001280:	b002      	add	sp, #8
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40022000 	.word	0x40022000
 8001290:	40003800 	.word	0x40003800

08001294 <TM_SPI3_INT_InitPins>:
#endif

#ifdef USE_SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001294:	b507      	push	{r0, r1, r2, lr}
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001296:	4603      	mov	r3, r0
 8001298:	b938      	cbnz	r0, 80012aa <TM_SPI3_INT_InitPins+0x16>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 800129a:	2103      	movs	r1, #3
 800129c:	2206      	movs	r2, #6
 800129e:	e88d 0006 	stmia.w	sp, {r1, r2}
 80012a2:	4602      	mov	r2, r0
 80012a4:	2138      	movs	r1, #56	; 0x38
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <TM_SPI3_INT_InitPins+0x44>)
 80012a8:	e00a      	b.n	80012c0 <TM_SPI3_INT_InitPins+0x2c>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 80012aa:	2801      	cmp	r0, #1
 80012ac:	d10b      	bne.n	80012c6 <TM_SPI3_INT_InitPins+0x32>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI3);
 80012ae:	2203      	movs	r2, #3
 80012b0:	2306      	movs	r3, #6
 80012b2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80012b6:	4809      	ldr	r0, [pc, #36]	; (80012dc <TM_SPI3_INT_InitPins+0x48>)
 80012b8:	2300      	movs	r3, #0
 80012ba:	461a      	mov	r2, r3
 80012bc:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80012c0:	f7ff ff4d 	bl	800115e <TM_GPIO_InitAlternate>
 80012c4:	e005      	b.n	80012d2 <TM_SPI3_INT_InitPins+0x3e>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80012c6:	2803      	cmp	r0, #3
 80012c8:	d103      	bne.n	80012d2 <TM_SPI3_INT_InitPins+0x3e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AF_SPI3);
 80012ca:	2106      	movs	r1, #6
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <TM_SPI3_INT_InitPins+0x4c>)
 80012ce:	f7ff ff79 	bl	80011c4 <TM_SPI_InitCustomPinsCallback>
	}
}
 80012d2:	b003      	add	sp, #12
 80012d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40003c00 	.word	0x40003c00

080012e4 <TM_SPI4_INT_InitPins>:
#endif

#ifdef USE_SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80012e4:	b507      	push	{r0, r1, r2, lr}
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 80012e6:	4603      	mov	r3, r0
 80012e8:	b930      	cbnz	r0, 80012f8 <TM_SPI4_INT_InitPins+0x14>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 80012ea:	2103      	movs	r1, #3
 80012ec:	2205      	movs	r2, #5
 80012ee:	e88d 0006 	stmia.w	sp, {r1, r2}
 80012f2:	4602      	mov	r2, r0
 80012f4:	2164      	movs	r1, #100	; 0x64
 80012f6:	e009      	b.n	800130c <TM_SPI4_INT_InitPins+0x28>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 80012f8:	2801      	cmp	r0, #1
 80012fa:	d10b      	bne.n	8001314 <TM_SPI4_INT_InitPins+0x30>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI4);
 80012fc:	2203      	movs	r2, #3
 80012fe:	2305      	movs	r3, #5
 8001300:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001304:	2300      	movs	r3, #0
 8001306:	461a      	mov	r2, r3
 8001308:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <TM_SPI4_INT_InitPins+0x44>)
 800130e:	f7ff ff26 	bl	800115e <TM_GPIO_InitAlternate>
 8001312:	e005      	b.n	8001320 <TM_SPI4_INT_InitPins+0x3c>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001314:	2803      	cmp	r0, #3
 8001316:	d103      	bne.n	8001320 <TM_SPI4_INT_InitPins+0x3c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AF_SPI4);
 8001318:	2105      	movs	r1, #5
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <TM_SPI4_INT_InitPins+0x48>)
 800131c:	f7ff ff52 	bl	80011c4 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001320:	b003      	add	sp, #12
 8001322:	f85d fb04 	ldr.w	pc, [sp], #4
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	40013400 	.word	0x40013400

08001330 <TM_SPI5_INT_InitPins>:
#endif

#ifdef USE_SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001330:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001332:	4603      	mov	r3, r0
 8001334:	b940      	cbnz	r0, 8001348 <TM_SPI5_INT_InitPins+0x18>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001336:	2103      	movs	r1, #3
 8001338:	2205      	movs	r2, #5
 800133a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800133e:	4602      	mov	r2, r0
 8001340:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <TM_SPI5_INT_InitPins+0x54>)
 8001346:	e012      	b.n	800136e <TM_SPI5_INT_InitPins+0x3e>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 8001348:	2801      	cmp	r0, #1
 800134a:	d113      	bne.n	8001374 <TM_SPI5_INT_InitPins+0x44>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 800134c:	2300      	movs	r3, #0
 800134e:	2403      	movs	r4, #3
 8001350:	2505      	movs	r5, #5
 8001352:	461a      	mov	r2, r3
 8001354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <TM_SPI5_INT_InitPins+0x54>)
 800135a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800135e:	f7ff fefe 	bl	800115e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI5);
 8001362:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001366:	2300      	movs	r3, #0
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <TM_SPI5_INT_InitPins+0x58>)
 800136a:	461a      	mov	r2, r3
 800136c:	21c0      	movs	r1, #192	; 0xc0
 800136e:	f7ff fef6 	bl	800115e <TM_GPIO_InitAlternate>
 8001372:	e005      	b.n	8001380 <TM_SPI5_INT_InitPins+0x50>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8001374:	2803      	cmp	r0, #3
 8001376:	d103      	bne.n	8001380 <TM_SPI5_INT_InitPins+0x50>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AF_SPI5);
 8001378:	2105      	movs	r1, #5
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <TM_SPI5_INT_InitPins+0x5c>)
 800137c:	f7ff ff22 	bl	80011c4 <TM_SPI_InitCustomPinsCallback>
	}
}
 8001380:	b003      	add	sp, #12
 8001382:	bd30      	pop	{r4, r5, pc}
 8001384:	40021400 	.word	0x40021400
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40015000 	.word	0x40015000

08001390 <TM_SPI6_INT_InitPins>:
#endif

#ifdef USE_SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8001390:	b507      	push	{r0, r1, r2, lr}
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 8001392:	4603      	mov	r3, r0
 8001394:	b950      	cbnz	r0, 80013ac <TM_SPI6_INT_InitPins+0x1c>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF_SPI6);
 8001396:	2103      	movs	r1, #3
 8001398:	2205      	movs	r2, #5
 800139a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800139e:	4602      	mov	r2, r0
 80013a0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <TM_SPI6_INT_InitPins+0x30>)
 80013a6:	f7ff feda 	bl	800115e <TM_GPIO_InitAlternate>
 80013aa:	e005      	b.n	80013b8 <TM_SPI6_INT_InitPins+0x28>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80013ac:	2803      	cmp	r0, #3
 80013ae:	d103      	bne.n	80013b8 <TM_SPI6_INT_InitPins+0x28>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AF_SPI6);
 80013b0:	2105      	movs	r1, #5
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <TM_SPI6_INT_InitPins+0x34>)
 80013b4:	f7ff ff06 	bl	80011c4 <TM_SPI_InitCustomPinsCallback>
	}
}
 80013b8:	b003      	add	sp, #12
 80013ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80013be:	bf00      	nop
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40015400 	.word	0x40015400

080013c8 <TM_SPIx_Init>:
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b087      	sub	sp, #28
 80013cc:	4604      	mov	r4, r0
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 80013ce:	a801      	add	r0, sp, #4
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 80013d0:	461f      	mov	r7, r3
 80013d2:	460e      	mov	r6, r1
 80013d4:	4615      	mov	r5, r2
	SPI_InitTypeDef SPI_InitStruct;

	/* Set default settings */
	SPI_StructInit(&SPI_InitStruct);
 80013d6:	f000 f8f2 	bl	80015be <SPI_StructInit>
#ifdef USE_SPI1	
	if (SPIx == SPI1) {
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <TM_SPIx_Init+0x120>)
 80013dc:	429c      	cmp	r4, r3
 80013de:	d108      	bne.n	80013f2 <TM_SPIx_Init+0x2a>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80013e0:	4a42      	ldr	r2, [pc, #264]	; (80014ec <TM_SPIx_Init+0x124>)
 80013e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80013e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 80013ea:	4630      	mov	r0, r6
 80013ec:	f7ff feec 	bl	80011c8 <TM_SPI1_INT_InitPins>
 80013f0:	e00a      	b.n	8001408 <TM_SPIx_Init+0x40>
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI1_DATASIZE;
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <TM_SPIx_Init+0x128>)
 80013f4:	429c      	cmp	r4, r3
 80013f6:	d10b      	bne.n	8001410 <TM_SPIx_Init+0x48>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80013f8:	4a3c      	ldr	r2, [pc, #240]	; (80014ec <TM_SPIx_Init+0x124>)
 80013fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8001402:	4630      	mov	r0, r6
 8001404:	f7ff ff08 	bl	8001218 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI2_DATASIZE;
 8001408:	2300      	movs	r3, #0
 800140a:	f8ad 3008 	strh.w	r3, [sp, #8]
 800140e:	e023      	b.n	8001458 <TM_SPIx_Init+0x90>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <TM_SPIx_Init+0x12c>)
 8001412:	429c      	cmp	r4, r3
 8001414:	d108      	bne.n	8001428 <TM_SPIx_Init+0x60>
		/* Enable SPI clock */
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001416:	4a35      	ldr	r2, [pc, #212]	; (80014ec <TM_SPIx_Init+0x124>)
 8001418:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800141a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8001420:	4630      	mov	r0, r6
 8001422:	f7ff ff37 	bl	8001294 <TM_SPI3_INT_InitPins>
 8001426:	e022      	b.n	800146e <TM_SPIx_Init+0xa6>
		SPI_InitStruct.SPI_DataSize = TM_SPI3_DATASIZE;
	
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <TM_SPIx_Init+0x130>)
 800142a:	429c      	cmp	r4, r3
 800142c:	d108      	bne.n	8001440 <TM_SPIx_Init+0x78>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800142e:	4a2f      	ldr	r2, [pc, #188]	; (80014ec <TM_SPIx_Init+0x124>)
 8001430:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001436:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8001438:	4630      	mov	r0, r6
 800143a:	f7ff ff53 	bl	80012e4 <TM_SPI4_INT_InitPins>
 800143e:	e016      	b.n	800146e <TM_SPIx_Init+0xa6>
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI4_DATASIZE;
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <TM_SPIx_Init+0x134>)
 8001442:	429c      	cmp	r4, r3
 8001444:	d108      	bne.n	8001458 <TM_SPIx_Init+0x90>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8001446:	4a29      	ldr	r2, [pc, #164]	; (80014ec <TM_SPIx_Init+0x124>)
 8001448:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800144a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800144e:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 8001450:	4630      	mov	r0, r6
 8001452:	f7ff ff6d 	bl	8001330 <TM_SPI5_INT_InitPins>
 8001456:	e00a      	b.n	800146e <TM_SPIx_Init+0xa6>
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI5_DATASIZE;
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <TM_SPIx_Init+0x138>)
 800145a:	429c      	cmp	r4, r3
 800145c:	d10a      	bne.n	8001474 <TM_SPIx_Init+0xac>
		/* Enable SPI clock */
		RCC->APB2ENR |= RCC_APB2ENR_SPI6EN;
 800145e:	4a23      	ldr	r2, [pc, #140]	; (80014ec <TM_SPIx_Init+0x124>)
 8001460:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001466:	6453      	str	r3, [r2, #68]	; 0x44
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8001468:	4630      	mov	r0, r6
 800146a:	f7ff ff91 	bl	8001390 <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
 800146e:	2300      	movs	r3, #0
 8001470:	f8ad 3008 	strh.w	r3, [sp, #8]
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
 8001474:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8001478:	f8ad 2012 	strh.w	r2, [sp, #18]
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
 800147c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001480:	f8ad 2006 	strh.w	r2, [sp, #6]
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001484:	2300      	movs	r3, #0
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001486:	f44f 7200 	mov.w	r2, #512	; 0x200
		SPI_InitStruct.SPI_DataSize = TM_SPI6_DATASIZE;
	}
#endif

	/* Fill SPI settings */
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler;
 800148a:	f8ad 7010 	strh.w	r7, [sp, #16]
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800148e:	f8ad 3004 	strh.w	r3, [sp, #4]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit;
	SPI_InitStruct.SPI_Mode = SPI_MasterSlave;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 8001492:	f8ad 200e 	strh.w	r2, [sp, #14]
	//SPI_InitStruct.SPI_DataSize = SPI_DataSize_16b;
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8001496:	b915      	cbnz	r5, 800149e <TM_SPIx_Init+0xd6>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8001498:	f8ad 500a 	strh.w	r5, [sp, #10]
 800149c:	e003      	b.n	80014a6 <TM_SPIx_Init+0xde>
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 800149e:	2d01      	cmp	r5, #1
 80014a0:	d104      	bne.n	80014ac <TM_SPIx_Init+0xe4>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 80014a2:	f8ad 300a 	strh.w	r3, [sp, #10]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 80014a6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80014aa:	e00c      	b.n	80014c6 <TM_SPIx_Init+0xfe>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 80014ac:	2d02      	cmp	r5, #2
 80014ae:	d102      	bne.n	80014b6 <TM_SPIx_Init+0xee>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 80014b0:	f8ad 500a 	strh.w	r5, [sp, #10]
 80014b4:	e005      	b.n	80014c2 <TM_SPIx_Init+0xfa>
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 80014b6:	2d03      	cmp	r5, #3
 80014b8:	d105      	bne.n	80014c6 <TM_SPIx_Init+0xfe>
		SPI_InitStruct.SPI_CPOL = SPI_CPOL_High;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8ad 300a 	strh.w	r3, [sp, #10]
		SPI_InitStruct.SPI_CPHA = SPI_CPHA_2Edge;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f8ad 300c 	strh.w	r3, [sp, #12]
	}
	
	/* Disable first */
	SPIx->CR1 &= ~SPI_CR1_SPE;
 80014c6:	8823      	ldrh	r3, [r4, #0]
 80014c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	0c1b      	lsrs	r3, r3, #16
 80014d0:	8023      	strh	r3, [r4, #0]
	
	/* Init SPI */
	SPI_Init(SPIx, &SPI_InitStruct);
 80014d2:	a901      	add	r1, sp, #4
 80014d4:	4620      	mov	r0, r4
 80014d6:	f000 f853 	bl	8001580 <SPI_Init>
	
	/* Enable SPI */
	SPIx->CR1 |= SPI_CR1_SPE;
 80014da:	8823      	ldrh	r3, [r4, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e2:	8023      	strh	r3, [r4, #0]
}
 80014e4:	b007      	add	sp, #28
 80014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e8:	40013000 	.word	0x40013000
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40003800 	.word	0x40003800
 80014f4:	40003c00 	.word	0x40003c00
 80014f8:	40013400 	.word	0x40013400
 80014fc:	40015000 	.word	0x40015000
 8001500:	40015400 	.word	0x40015400

08001504 <TM_SPI_Init>:
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <TM_SPI_Init+0x64>)
 8001506:	4298      	cmp	r0, r3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8001508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800150a:	4604      	mov	r4, r0
 800150c:	460d      	mov	r5, r1
	/* Init with default settings */
#ifdef USE_SPI1
	if (SPIx == SPI1) {
 800150e:	d002      	beq.n	8001516 <TM_SPI_Init+0x12>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
	}
#endif
#ifdef USE_SPI2
	if (SPIx == SPI2) {
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <TM_SPI_Init+0x68>)
 8001512:	4298      	cmp	r0, r3
 8001514:	d108      	bne.n	8001528 <TM_SPI_Init+0x24>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7382 	mov.w	r3, #260	; 0x104
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	9201      	str	r2, [sp, #4]
 8001520:	2320      	movs	r3, #32
 8001522:	f7ff ff51 	bl	80013c8 <TM_SPIx_Init>
 8001526:	e00f      	b.n	8001548 <TM_SPI_Init+0x44>
	}
#endif
#ifdef USE_SPI3
	if (SPIx == SPI3) {
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <TM_SPI_Init+0x6c>)
 800152a:	4298      	cmp	r0, r3
 800152c:	d005      	beq.n	800153a <TM_SPI_Init+0x36>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
	}
#endif
#ifdef USE_SPI4
	if (SPIx == SPI4) {
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <TM_SPI_Init+0x70>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d002      	beq.n	800153a <TM_SPI_Init+0x36>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
	}
#endif
#ifdef USE_SPI5
	if (SPIx == SPI5) {
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <TM_SPI_Init+0x74>)
 8001536:	4298      	cmp	r0, r3
 8001538:	d106      	bne.n	8001548 <TM_SPI_Init+0x44>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 800153a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800153e:	2200      	movs	r2, #0
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	9201      	str	r2, [sp, #4]
 8001544:	2320      	movs	r3, #32
 8001546:	e00a      	b.n	800155e <TM_SPI_Init+0x5a>
	}
#endif
#ifdef USE_SPI6
	if (SPIx == SPI6) {
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <TM_SPI_Init+0x78>)
 800154a:	429c      	cmp	r4, r3
 800154c:	d109      	bne.n	8001562 <TM_SPI_Init+0x5e>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 800154e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001552:	2200      	movs	r2, #0
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	9201      	str	r2, [sp, #4]
 8001558:	2320      	movs	r3, #32
 800155a:	4629      	mov	r1, r5
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff33 	bl	80013c8 <TM_SPIx_Init>
	}
#endif
}
 8001562:	b003      	add	sp, #12
 8001564:	bd30      	pop	{r4, r5, pc}
 8001566:	bf00      	nop
 8001568:	40013000 	.word	0x40013000
 800156c:	40003800 	.word	0x40003800
 8001570:	40003c00 	.word	0x40003c00
 8001574:	40013400 	.word	0x40013400
 8001578:	40015000 	.word	0x40015000
 800157c:	40015400 	.word	0x40015400

08001580 <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001580:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001582:	880a      	ldrh	r2, [r1, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001584:	b510      	push	{r4, lr}

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001586:	f403 5441 	and.w	r4, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800158a:	884b      	ldrh	r3, [r1, #2]
 800158c:	4313      	orrs	r3, r2
 800158e:	888a      	ldrh	r2, [r1, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	88ca      	ldrh	r2, [r1, #6]
 8001594:	4313      	orrs	r3, r2
 8001596:	890a      	ldrh	r2, [r1, #8]
 8001598:	4313      	orrs	r3, r2
 800159a:	894a      	ldrh	r2, [r1, #10]
 800159c:	4313      	orrs	r3, r2
 800159e:	898a      	ldrh	r2, [r1, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	89ca      	ldrh	r2, [r1, #14]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	4323      	orrs	r3, r4
 80015a8:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80015aa:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80015ac:	8b83      	ldrh	r3, [r0, #28]
 80015ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015b2:	041b      	lsls	r3, r3, #16
 80015b4:	0c1b      	lsrs	r3, r3, #16
 80015b6:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80015b8:	8a0b      	ldrh	r3, [r1, #16]
 80015ba:	8203      	strh	r3, [r0, #16]
 80015bc:	bd10      	pop	{r4, pc}

080015be <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80015be:	2300      	movs	r3, #0
 80015c0:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80015c2:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80015c4:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80015c6:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80015c8:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80015ca:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80015cc:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80015ce:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80015d0:	2307      	movs	r3, #7
 80015d2:	8203      	strh	r3, [r0, #16]
 80015d4:	4770      	bx	lr
	...

080015d8 <LTDC_Init>:
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <LTDC_Init+0x90>)
 80015da:	4a24      	ldr	r2, [pc, #144]	; (800166c <LTDC_Init+0x94>)
 80015dc:	6899      	ldr	r1, [r3, #8]
 80015de:	4011      	ands	r1, r2
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 80015e0:	b530      	push	{r4, r5, lr}
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80015e2:	6099      	str	r1, [r3, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 80015e4:	689d      	ldr	r5, [r3, #8]
 80015e6:	6941      	ldr	r1, [r0, #20]
 80015e8:	6904      	ldr	r4, [r0, #16]
 80015ea:	4329      	orrs	r1, r5
 80015ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80015f0:	6099      	str	r1, [r3, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80015f2:	68d9      	ldr	r1, [r3, #12]
 80015f4:	4011      	ands	r1, r2
 80015f6:	60d9      	str	r1, [r3, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 80015f8:	68dd      	ldr	r5, [r3, #12]
 80015fa:	69c1      	ldr	r1, [r0, #28]
 80015fc:	6984      	ldr	r4, [r0, #24]
 80015fe:	4329      	orrs	r1, r5
 8001600:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8001604:	60d9      	str	r1, [r3, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001606:	6919      	ldr	r1, [r3, #16]
 8001608:	4011      	ands	r1, r2
 800160a:	6119      	str	r1, [r3, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 800160c:	691d      	ldr	r5, [r3, #16]
 800160e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001610:	6a04      	ldr	r4, [r0, #32]
 8001612:	4329      	orrs	r1, r5
 8001614:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8001618:	6119      	str	r1, [r3, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800161a:	6959      	ldr	r1, [r3, #20]
 800161c:	400a      	ands	r2, r1
 800161e:	615a      	str	r2, [r3, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 8001620:	695c      	ldr	r4, [r3, #20]
 8001622:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001624:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001626:	4322      	orrs	r2, r4
 8001628:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800162c:	615a      	str	r2, [r3, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800162e:	6999      	ldr	r1, [r3, #24]
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <LTDC_Init+0x98>)
 8001632:	400a      	ands	r2, r1
 8001634:	619a      	str	r2, [r3, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8001636:	6802      	ldr	r2, [r0, #0]
 8001638:	6999      	ldr	r1, [r3, #24]
 800163a:	4311      	orrs	r1, r2
 800163c:	6842      	ldr	r2, [r0, #4]
 800163e:	4311      	orrs	r1, r2
 8001640:	6882      	ldr	r2, [r0, #8]
 8001642:	4311      	orrs	r1, r2
 8001644:	68c2      	ldr	r2, [r0, #12]
 8001646:	430a      	orrs	r2, r1
 8001648:	619a      	str	r2, [r3, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800164a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  LTDC->GCR &= (uint32_t)GCR_MASK;
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 800164c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 800164e:	6b04      	ldr	r4, [r0, #48]	; 0x30

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001650:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8001654:	62d9      	str	r1, [r3, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 8001656:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001658:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800165a:	4329      	orrs	r1, r5
 800165c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8001660:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
 8001666:	bd30      	pop	{r4, r5, pc}
 8001668:	40016800 	.word	0x40016800
 800166c:	f000f800 	.word	0xf000f800
 8001670:	0ffe888f 	.word	0x0ffe888f

08001674 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <LTDC_Cmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8001676:	699a      	ldr	r2, [r3, #24]
void LTDC_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001678:	b110      	cbz	r0, 8001680 <LTDC_Cmd+0xc>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	e001      	b.n	8001684 <LTDC_Cmd+0x10>
  }
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	619a      	str	r2, [r3, #24]
 8001686:	4770      	bx	lr
 8001688:	40016800 	.word	0x40016800

0800168c <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <LTDC_DitherCmd+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 800168e:	699a      	ldr	r2, [r3, #24]
void LTDC_DitherCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001690:	b110      	cbz	r0, 8001698 <LTDC_DitherCmd+0xc>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8001692:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001696:	e001      	b.n	800169c <LTDC_DitherCmd+0x10>
  }
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 8001698:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800169c:	619a      	str	r2, [r3, #24]
 800169e:	4770      	bx	lr
 80016a0:	40016800 	.word	0x40016800

080016a4 <LTDC_ReloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 80016a4:	4b01      	ldr	r3, [pc, #4]	; (80016ac <LTDC_ReloadConfig+0x8>)
 80016a6:	6258      	str	r0, [r3, #36]	; 0x24
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40016800 	.word	0x40016800

080016b0 <LTDC_LayerInit>:
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80016b0:	6842      	ldr	r2, [r0, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 80016b2:	680b      	ldr	r3, [r1, #0]
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 80016b4:	b530      	push	{r4, r5, lr}
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 80016b6:	684c      	ldr	r4, [r1, #4]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 80016b8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 80016ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80016be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016c2:	6042      	str	r2, [r0, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 80016c4:	6043      	str	r3, [r0, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80016c6:	6882      	ldr	r2, [r0, #8]
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 80016c8:	68cc      	ldr	r4, [r1, #12]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80016ca:	688b      	ldr	r3, [r1, #8]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80016cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80016d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80016d4:	6082      	str	r2, [r0, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 80016d6:	6083      	str	r3, [r0, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 80016d8:	6903      	ldr	r3, [r0, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80016da:	6a0a      	ldr	r2, [r1, #32]
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 80016dc:	f023 0307 	bic.w	r3, r3, #7
 80016e0:	6103      	str	r3, [r0, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 80016e2:	690b      	ldr	r3, [r1, #16]
 80016e4:	6103      	str	r3, [r0, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 80016e6:	69cb      	ldr	r3, [r1, #28]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80016e8:	6984      	ldr	r4, [r0, #24]
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 80016ea:	0412      	lsls	r2, r2, #16
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
                        dcred | dcalpha);
 80016ec:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80016f0:	698b      	ldr	r3, [r1, #24]
 80016f2:	4313      	orrs	r3, r2

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80016f4:	2400      	movs	r4, #0
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
                        dcred | dcalpha);
 80016f6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80016fa:	6184      	str	r4, [r0, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 80016fc:	6183      	str	r3, [r0, #24]
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 80016fe:	6943      	ldr	r3, [r0, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8001700:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
                        dcred | dcalpha);

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001706:	6143      	str	r3, [r0, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8001708:	694b      	ldr	r3, [r1, #20]
 800170a:	6143      	str	r3, [r0, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800170c:	69c3      	ldr	r3, [r0, #28]
 800170e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001712:	f023 0307 	bic.w	r3, r3, #7
 8001716:	61c3      	str	r3, [r0, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8001718:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800171a:	4313      	orrs	r3, r2
 800171c:	61c3      	str	r3, [r0, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800171e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001720:	6284      	str	r4, [r0, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8001722:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001724:	6283      	str	r3, [r0, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001726:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8001728:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 800172a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800172c:	f002 22e0 	and.w	r2, r2, #3758153728	; 0xe000e000
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8001730:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001734:	62c2      	str	r2, [r0, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8001736:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001738:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800173a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800173e:	f023 0307 	bic.w	r3, r3, #7
 8001742:	6303      	str	r3, [r0, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8001744:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001746:	6303      	str	r3, [r0, #48]	; 0x30
 8001748:	bd30      	pop	{r4, r5, pc}

0800174a <LTDC_LayerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800174a:	6803      	ldr	r3, [r0, #0]
void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800174c:	b111      	cbz	r1, 8001754 <LTDC_LayerCmd+0xa>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	e001      	b.n	8001758 <LTDC_LayerCmd+0xe>
  }
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6003      	str	r3, [r0, #0]
 800175a:	4770      	bx	lr

0800175c <LTDC_LayerAlpha>:
  */

void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
{  
  /* reconfigure the constant alpha value */      
  LTDC_Layerx->CACR = ConstantAlpha;
 800175c:	6141      	str	r1, [r0, #20]
 800175e:	4770      	bx	lr

08001760 <RCC_PLLSAIConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8001760:	0712      	lsls	r2, r2, #28
 8001762:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8001766:	4b03      	ldr	r3, [pc, #12]	; (8001774 <RCC_PLLSAIConfig+0x14>)
 8001768:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 800176c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8001778:	4b01      	ldr	r3, [pc, #4]	; (8001780 <RCC_PLLSAICmd+0x8>)
 800177a:	6018      	str	r0, [r3, #0]
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	42470070 	.word	0x42470070

08001784 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <RCC_LTDCCLKDivConfig+0x14>)
 8001786:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 800178a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800178e:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8001790:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800179c:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 800179e:	2a01      	cmp	r2, #1
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <RCC_GetFlagStatus+0x24>)
 80017a2:	d101      	bne.n	80017a8 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	e003      	b.n	80017b0 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80017a8:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 80017aa:	bf0c      	ite	eq
 80017ac:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80017ae:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 80017b0:	f000 001f 	and.w	r0, r0, #31
 80017b4:	fa23 f000 	lsr.w	r0, r3, r0
}
 80017b8:	f000 0001 	and.w	r0, r0, #1
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <FMC_SDRAMInit>:
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* Get SDRAM register value */
  tmpr1 = FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank];
 80017c4:	6802      	ldr	r2, [r0, #0]
                       FMC_SDRAMInitStruct->FMC_RowBitsNumber |
                       FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
                       FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
                       FMC_SDRAMInitStruct->FMC_CASLatency |
                       FMC_SDRAMInitStruct->FMC_WriteProtection |
                       FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 80017c6:	f8d0 c01c 	ldr.w	ip, [r0, #28]
 80017ca:	0091      	lsls	r1, r2, #2
 80017cc:	f101 4120 	add.w	r1, r1, #2684354560	; 0xa0000000
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 80017d0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* Get SDRAM register value */
  tmpr1 = FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank];
 80017d4:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
  tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                        FMC_SDCR1_NB | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                        FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

  /* SDRAM bank control register configuration */ 
  tmpr1 |=   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80017d8:	6846      	ldr	r6, [r0, #4]
 80017da:	68c7      	ldr	r7, [r0, #12]
                       FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
                       FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
                       FMC_SDRAMInitStruct->FMC_CASLatency |
                       FMC_SDRAMInitStruct->FMC_WriteProtection |
                       FMC_SDRAMInitStruct->FMC_SDClockPeriod |
                       FMC_SDRAMInitStruct->FMC_ReadBurst | 
 80017dc:	6a05      	ldr	r5, [r0, #32]
                       FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 80017de:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
  /* Get SDRAM register value */
  tmpr1 = FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank];

  /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
  tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80017e0:	f423 49ff 	bic.w	r9, r3, #32640	; 0x7f80
                        FMC_SDCR1_NB | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                        FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

  /* SDRAM bank control register configuration */ 
  tmpr1 |=   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 80017e4:	6883      	ldr	r3, [r0, #8]
 80017e6:	4333      	orrs	r3, r6
 80017e8:	433b      	orrs	r3, r7
 80017ea:	6907      	ldr	r7, [r0, #16]
 80017ec:	6946      	ldr	r6, [r0, #20]
 80017ee:	433b      	orrs	r3, r7
 80017f0:	4333      	orrs	r3, r6
 80017f2:	6986      	ldr	r6, [r0, #24]
 80017f4:	4f2f      	ldr	r7, [pc, #188]	; (80018b4 <FMC_SDRAMInit+0xf0>)
 80017f6:	4333      	orrs	r3, r6
 80017f8:	ea43 030c 	orr.w	r3, r3, ip
 80017fc:	432b      	orrs	r3, r5
  
  /* Get SDRAM register value */
  tmpr1 = FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank];

  /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
  tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80017fe:	f029 097f 	bic.w	r9, r9, #127	; 0x7f
                        FMC_SDCR1_NB | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                        FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

  /* SDRAM bank control register configuration */ 
  tmpr1 |=   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8001802:	4323      	orrs	r3, r4
 8001804:	f501 7ea0 	add.w	lr, r1, #320	; 0x140
 8001808:	ea43 0309 	orr.w	r3, r3, r9
 800180c:	6a86      	ldr	r6, [r0, #40]	; 0x28
                       FMC_SDRAMInitStruct->FMC_WriteProtection |
                       FMC_SDRAMInitStruct->FMC_SDClockPeriod |
                       FMC_SDRAMInitStruct->FMC_ReadBurst | 
                       FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 800180e:	bb0a      	cbnz	r2, 8001854 <FMC_SDRAMInit+0x90>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	6833      	ldr	r3, [r6, #0]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
  {
    /* Get SDTR register value */
    tmpr2 = FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank];
 8001814:	68bd      	ldr	r5, [r7, #8]
 8001816:	6874      	ldr	r4, [r6, #4]
 8001818:	68b0      	ldr	r0, [r6, #8]
 800181a:	68f1      	ldr	r1, [r6, #12]
 800181c:	1e5a      	subs	r2, r3, #1
 800181e:	f005 4370 	and.w	r3, r5, #4026531840	; 0xf0000000
 8001822:	431a      	orrs	r2, r3
 8001824:	3c01      	subs	r4, #1
 8001826:	ea42 1304 	orr.w	r3, r2, r4, lsl #4
 800182a:	3801      	subs	r0, #1
 800182c:	6932      	ldr	r2, [r6, #16]
 800182e:	ea43 2400 	orr.w	r4, r3, r0, lsl #8
 8001832:	3901      	subs	r1, #1
 8001834:	6973      	ldr	r3, [r6, #20]
 8001836:	3a01      	subs	r2, #1
 8001838:	ea44 3001 	orr.w	r0, r4, r1, lsl #12
 800183c:	3b01      	subs	r3, #1
 800183e:	ea40 4102 	orr.w	r1, r0, r2, lsl #16
 8001842:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));

    tmpr2 |=   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8001846:	69b3      	ldr	r3, [r6, #24]
 8001848:	3b01      	subs	r3, #1
 800184a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    /* Get SDCR register value */
    tmpr3 = FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM];
 8001854:	683a      	ldr	r2, [r7, #0]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr3 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr3 |= (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8001856:	ea4c 0505 	orr.w	r5, ip, r5
  {
    /* Get SDCR register value */
    tmpr3 = FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM];

    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr3 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800185a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800185e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr3 |= (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8001862:	432c      	orrs	r4, r5
 8001864:	4322      	orrs	r2, r4
                       FMC_SDRAMInitStruct->FMC_ReadBurst | 
                       FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 8001866:	603a      	str	r2, [r7, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8001868:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));

    tmpr2 |=   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800186c:	68b1      	ldr	r1, [r6, #8]
 800186e:	6872      	ldr	r2, [r6, #4]
 8001870:	6833      	ldr	r3, [r6, #0]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  else   /* SDTR "don't care bits configuration */
  {
    /* Get SDTR register value */
    tmpr2 = FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank];
 8001872:	f8de 0008 	ldr.w	r0, [lr, #8]
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));

    tmpr2 |=   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8001876:	3901      	subs	r1, #1
 8001878:	0209      	lsls	r1, r1, #8
 800187a:	3a01      	subs	r2, #1
 800187c:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 8001880:	3b01      	subs	r3, #1
 8001882:	431a      	orrs	r2, r3
 8001884:	6933      	ldr	r3, [r6, #16]
 8001886:	3b01      	subs	r3, #1
 8001888:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
    
    /* Get SDTR register value */
    tmpr4 = FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM];
 800188c:	68ba      	ldr	r2, [r7, #8]
  {
    /* Get SDTR register value */
    tmpr2 = FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank];

    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800188e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
    
    /* Get SDTR register value */
    tmpr4 = FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM];

    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr4 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8001892:	f002 4170 	and.w	r1, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));

    tmpr4 |=   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8001896:	6972      	ldr	r2, [r6, #20]
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));

    tmpr2 |=   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8001898:	4318      	orrs	r0, r3
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr4 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));

    tmpr4 |=   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800189a:	68f3      	ldr	r3, [r6, #12]
 800189c:	3a01      	subs	r2, #1
 800189e:	0512      	lsls	r2, r2, #20
 80018a0:	3b01      	subs	r3, #1
 80018a2:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 80018a6:	ea43 0201 	orr.w	r2, r3, r1
                          (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 80018aa:	60ba      	str	r2, [r7, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80018ac:	f8ce 0008 	str.w	r0, [lr, #8]
 80018b0:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 80018b4:	a0000140 	.word	0xa0000140

080018b8 <FMC_SDRAMCmdConfig>:
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 80018b8:	e890 000c 	ldmia.w	r0, {r2, r3}
 80018bc:	4313      	orrs	r3, r2
 80018be:	68c2      	ldr	r2, [r0, #12]
 80018c0:	ea43 2242 	orr.w	r2, r3, r2, lsl #9
 80018c4:	6883      	ldr	r3, [r0, #8]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
  
  FMC_Bank5_6->SDCMR = tmpr;
 80018cc:	4a01      	ldr	r2, [pc, #4]	; (80018d4 <FMC_SDRAMCmdConfig+0x1c>)
 80018ce:	6113      	str	r3, [r2, #16]
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	a0000140 	.word	0xa0000140

080018d8 <FMC_SetRefreshCount>:
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 80018d8:	4a02      	ldr	r2, [pc, #8]	; (80018e4 <FMC_SetRefreshCount+0xc>)
 80018da:	6953      	ldr	r3, [r2, #20]
 80018dc:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
 80018e0:	6150      	str	r0, [r2, #20]
 80018e2:	4770      	bx	lr
 80018e4:	a0000140 	.word	0xa0000140

080018e8 <FMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 80018e8:	2810      	cmp	r0, #16
 80018ea:	d101      	bne.n	80018f0 <FMC_GetFlagStatus+0x8>
  {
    tmpsr = FMC_Bank2->SR2;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <FMC_GetFlagStatus+0x30>)
 80018ee:	e003      	b.n	80018f8 <FMC_GetFlagStatus+0x10>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80018f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80018f4:	d102      	bne.n	80018fc <FMC_GetFlagStatus+0x14>
  {
    tmpsr = FMC_Bank3->SR3;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <FMC_GetFlagStatus+0x34>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	e006      	b.n	800190a <FMC_GetFlagStatus+0x22>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80018fc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001900:	d101      	bne.n	8001906 <FMC_GetFlagStatus+0x1e>
  {
    tmpsr = FMC_Bank4->SR4;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <FMC_GetFlagStatus+0x38>)
 8001904:	e7f8      	b.n	80018f8 <FMC_GetFlagStatus+0x10>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <FMC_GetFlagStatus+0x3c>)
 8001908:	699b      	ldr	r3, [r3, #24]
  else
  {
    bitstatus = SET;
  }
  /* Return the flag status */
  return bitstatus;
 800190a:	ea31 0303 	bics.w	r3, r1, r3
}
 800190e:	bf0c      	ite	eq
 8001910:	2001      	moveq	r0, #1
 8001912:	2000      	movne	r0, #0
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	a0000060 	.word	0xa0000060
 800191c:	a0000080 	.word	0xa0000080
 8001920:	a00000a0 	.word	0xa00000a0
 8001924:	a0000140 	.word	0xa0000140

08001928 <__errno>:
 8001928:	4b01      	ldr	r3, [pc, #4]	; (8001930 <__errno+0x8>)
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000428 	.word	0x20000428

08001934 <malloc>:
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <malloc+0xc>)
 8001936:	4601      	mov	r1, r0
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	f000 b803 	b.w	8001944 <_malloc_r>
 800193e:	bf00      	nop
 8001940:	20000428 	.word	0x20000428

08001944 <_malloc_r>:
 8001944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001948:	f101 050b 	add.w	r5, r1, #11
 800194c:	2d16      	cmp	r5, #22
 800194e:	b083      	sub	sp, #12
 8001950:	4606      	mov	r6, r0
 8001952:	f240 809f 	bls.w	8001a94 <_malloc_r+0x150>
 8001956:	f035 0507 	bics.w	r5, r5, #7
 800195a:	f100 80bf 	bmi.w	8001adc <_malloc_r+0x198>
 800195e:	42a9      	cmp	r1, r5
 8001960:	f200 80bc 	bhi.w	8001adc <_malloc_r+0x198>
 8001964:	f000 faa6 	bl	8001eb4 <__malloc_lock>
 8001968:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800196c:	f0c0 829c 	bcc.w	8001ea8 <_malloc_r+0x564>
 8001970:	0a6b      	lsrs	r3, r5, #9
 8001972:	f000 80ba 	beq.w	8001aea <_malloc_r+0x1a6>
 8001976:	2b04      	cmp	r3, #4
 8001978:	f200 8183 	bhi.w	8001c82 <_malloc_r+0x33e>
 800197c:	09a8      	lsrs	r0, r5, #6
 800197e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8001982:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001986:	3038      	adds	r0, #56	; 0x38
 8001988:	4fc4      	ldr	r7, [pc, #784]	; (8001c9c <_malloc_r+0x358>)
 800198a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800198e:	f1a3 0108 	sub.w	r1, r3, #8
 8001992:	685c      	ldr	r4, [r3, #4]
 8001994:	42a1      	cmp	r1, r4
 8001996:	d107      	bne.n	80019a8 <_malloc_r+0x64>
 8001998:	e0ac      	b.n	8001af4 <_malloc_r+0x1b0>
 800199a:	2a00      	cmp	r2, #0
 800199c:	f280 80ac 	bge.w	8001af8 <_malloc_r+0x1b4>
 80019a0:	68e4      	ldr	r4, [r4, #12]
 80019a2:	42a1      	cmp	r1, r4
 80019a4:	f000 80a6 	beq.w	8001af4 <_malloc_r+0x1b0>
 80019a8:	6863      	ldr	r3, [r4, #4]
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	1b5a      	subs	r2, r3, r5
 80019b0:	2a0f      	cmp	r2, #15
 80019b2:	ddf2      	ble.n	800199a <_malloc_r+0x56>
 80019b4:	49b9      	ldr	r1, [pc, #740]	; (8001c9c <_malloc_r+0x358>)
 80019b6:	693c      	ldr	r4, [r7, #16]
 80019b8:	f101 0e08 	add.w	lr, r1, #8
 80019bc:	4574      	cmp	r4, lr
 80019be:	f000 81b3 	beq.w	8001d28 <_malloc_r+0x3e4>
 80019c2:	6863      	ldr	r3, [r4, #4]
 80019c4:	f023 0303 	bic.w	r3, r3, #3
 80019c8:	1b5a      	subs	r2, r3, r5
 80019ca:	2a0f      	cmp	r2, #15
 80019cc:	f300 8199 	bgt.w	8001d02 <_malloc_r+0x3be>
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	f8c1 e014 	str.w	lr, [r1, #20]
 80019d6:	f8c1 e010 	str.w	lr, [r1, #16]
 80019da:	f280 809e 	bge.w	8001b1a <_malloc_r+0x1d6>
 80019de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e2:	f080 8167 	bcs.w	8001cb4 <_malloc_r+0x370>
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	f103 0c01 	add.w	ip, r3, #1
 80019ec:	2201      	movs	r2, #1
 80019ee:	109b      	asrs	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	684a      	ldr	r2, [r1, #4]
 80019f6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 80019fa:	f8c4 8008 	str.w	r8, [r4, #8]
 80019fe:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8001a02:	431a      	orrs	r2, r3
 8001a04:	f1a9 0308 	sub.w	r3, r9, #8
 8001a08:	60e3      	str	r3, [r4, #12]
 8001a0a:	604a      	str	r2, [r1, #4]
 8001a0c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8001a10:	f8c8 400c 	str.w	r4, [r8, #12]
 8001a14:	1083      	asrs	r3, r0, #2
 8001a16:	2401      	movs	r4, #1
 8001a18:	409c      	lsls	r4, r3
 8001a1a:	4294      	cmp	r4, r2
 8001a1c:	f200 808a 	bhi.w	8001b34 <_malloc_r+0x1f0>
 8001a20:	4214      	tst	r4, r2
 8001a22:	d106      	bne.n	8001a32 <_malloc_r+0xee>
 8001a24:	f020 0003 	bic.w	r0, r0, #3
 8001a28:	0064      	lsls	r4, r4, #1
 8001a2a:	4214      	tst	r4, r2
 8001a2c:	f100 0004 	add.w	r0, r0, #4
 8001a30:	d0fa      	beq.n	8001a28 <_malloc_r+0xe4>
 8001a32:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8001a36:	46cc      	mov	ip, r9
 8001a38:	4680      	mov	r8, r0
 8001a3a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001a3e:	458c      	cmp	ip, r1
 8001a40:	d107      	bne.n	8001a52 <_malloc_r+0x10e>
 8001a42:	e173      	b.n	8001d2c <_malloc_r+0x3e8>
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	f280 8181 	bge.w	8001d4c <_malloc_r+0x408>
 8001a4a:	68c9      	ldr	r1, [r1, #12]
 8001a4c:	458c      	cmp	ip, r1
 8001a4e:	f000 816d 	beq.w	8001d2c <_malloc_r+0x3e8>
 8001a52:	684b      	ldr	r3, [r1, #4]
 8001a54:	f023 0303 	bic.w	r3, r3, #3
 8001a58:	1b5a      	subs	r2, r3, r5
 8001a5a:	2a0f      	cmp	r2, #15
 8001a5c:	ddf2      	ble.n	8001a44 <_malloc_r+0x100>
 8001a5e:	460c      	mov	r4, r1
 8001a60:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001a64:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8001a68:	194b      	adds	r3, r1, r5
 8001a6a:	f045 0501 	orr.w	r5, r5, #1
 8001a6e:	604d      	str	r5, [r1, #4]
 8001a70:	f042 0101 	orr.w	r1, r2, #1
 8001a74:	f8c8 c00c 	str.w	ip, [r8, #12]
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f8cc 8008 	str.w	r8, [ip, #8]
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	f8c3 e00c 	str.w	lr, [r3, #12]
 8001a86:	f8c3 e008 	str.w	lr, [r3, #8]
 8001a8a:	6059      	str	r1, [r3, #4]
 8001a8c:	509a      	str	r2, [r3, r2]
 8001a8e:	f000 fa13 	bl	8001eb8 <__malloc_unlock>
 8001a92:	e01f      	b.n	8001ad4 <_malloc_r+0x190>
 8001a94:	2910      	cmp	r1, #16
 8001a96:	d821      	bhi.n	8001adc <_malloc_r+0x198>
 8001a98:	f000 fa0c 	bl	8001eb4 <__malloc_lock>
 8001a9c:	2510      	movs	r5, #16
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	4f7e      	ldr	r7, [pc, #504]	; (8001c9c <_malloc_r+0x358>)
 8001aa4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001aa8:	f1a3 0208 	sub.w	r2, r3, #8
 8001aac:	685c      	ldr	r4, [r3, #4]
 8001aae:	4294      	cmp	r4, r2
 8001ab0:	f000 8145 	beq.w	8001d3e <_malloc_r+0x3fa>
 8001ab4:	6863      	ldr	r3, [r4, #4]
 8001ab6:	68e1      	ldr	r1, [r4, #12]
 8001ab8:	68a5      	ldr	r5, [r4, #8]
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	4423      	add	r3, r4
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	60e9      	str	r1, [r5, #12]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	608d      	str	r5, [r1, #8]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	f000 f9f3 	bl	8001eb8 <__malloc_unlock>
 8001ad2:	3408      	adds	r4, #8
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	b003      	add	sp, #12
 8001ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001adc:	2400      	movs	r4, #0
 8001ade:	230c      	movs	r3, #12
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	6033      	str	r3, [r6, #0]
 8001ae4:	b003      	add	sp, #12
 8001ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8001af0:	203f      	movs	r0, #63	; 0x3f
 8001af2:	e749      	b.n	8001988 <_malloc_r+0x44>
 8001af4:	4670      	mov	r0, lr
 8001af6:	e75d      	b.n	80019b4 <_malloc_r+0x70>
 8001af8:	4423      	add	r3, r4
 8001afa:	68e1      	ldr	r1, [r4, #12]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	68a5      	ldr	r5, [r4, #8]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	60e9      	str	r1, [r5, #12]
 8001b06:	4630      	mov	r0, r6
 8001b08:	608d      	str	r5, [r1, #8]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	f000 f9d4 	bl	8001eb8 <__malloc_unlock>
 8001b10:	3408      	adds	r4, #8
 8001b12:	4620      	mov	r0, r4
 8001b14:	b003      	add	sp, #12
 8001b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b1a:	4423      	add	r3, r4
 8001b1c:	4630      	mov	r0, r6
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	f000 f9c7 	bl	8001eb8 <__malloc_unlock>
 8001b2a:	3408      	adds	r4, #8
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	b003      	add	sp, #12
 8001b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b34:	68bc      	ldr	r4, [r7, #8]
 8001b36:	6863      	ldr	r3, [r4, #4]
 8001b38:	f023 0803 	bic.w	r8, r3, #3
 8001b3c:	45a8      	cmp	r8, r5
 8001b3e:	d304      	bcc.n	8001b4a <_malloc_r+0x206>
 8001b40:	ebc5 0308 	rsb	r3, r5, r8
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	f300 808c 	bgt.w	8001c62 <_malloc_r+0x31e>
 8001b4a:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <_malloc_r+0x35c>)
 8001b4c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8001cb0 <_malloc_r+0x36c>
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f8d9 3000 	ldr.w	r3, [r9]
 8001b56:	3301      	adds	r3, #1
 8001b58:	442a      	add	r2, r5
 8001b5a:	eb04 0a08 	add.w	sl, r4, r8
 8001b5e:	f000 8160 	beq.w	8001e22 <_malloc_r+0x4de>
 8001b62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b66:	320f      	adds	r2, #15
 8001b68:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8001b6c:	f022 020f 	bic.w	r2, r2, #15
 8001b70:	4611      	mov	r1, r2
 8001b72:	4630      	mov	r0, r6
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	f000 f9a1 	bl	8001ebc <_sbrk_r>
 8001b7a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001b7e:	4683      	mov	fp, r0
 8001b80:	9a01      	ldr	r2, [sp, #4]
 8001b82:	f000 8158 	beq.w	8001e36 <_malloc_r+0x4f2>
 8001b86:	4582      	cmp	sl, r0
 8001b88:	f200 80fc 	bhi.w	8001d84 <_malloc_r+0x440>
 8001b8c:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <_malloc_r+0x360>)
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	45da      	cmp	sl, fp
 8001b92:	4411      	add	r1, r2
 8001b94:	6019      	str	r1, [r3, #0]
 8001b96:	f000 8153 	beq.w	8001e40 <_malloc_r+0x4fc>
 8001b9a:	f8d9 0000 	ldr.w	r0, [r9]
 8001b9e:	f8df e110 	ldr.w	lr, [pc, #272]	; 8001cb0 <_malloc_r+0x36c>
 8001ba2:	3001      	adds	r0, #1
 8001ba4:	bf1b      	ittet	ne
 8001ba6:	ebca 0a0b 	rsbne	sl, sl, fp
 8001baa:	4451      	addne	r1, sl
 8001bac:	f8ce b000 	streq.w	fp, [lr]
 8001bb0:	6019      	strne	r1, [r3, #0]
 8001bb2:	f01b 0107 	ands.w	r1, fp, #7
 8001bb6:	f000 8117 	beq.w	8001de8 <_malloc_r+0x4a4>
 8001bba:	f1c1 0008 	rsb	r0, r1, #8
 8001bbe:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8001bc2:	4483      	add	fp, r0
 8001bc4:	3108      	adds	r1, #8
 8001bc6:	445a      	add	r2, fp
 8001bc8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001bcc:	ebc2 0901 	rsb	r9, r2, r1
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	f000 f971 	bl	8001ebc <_sbrk_r>
 8001bda:	1c43      	adds	r3, r0, #1
 8001bdc:	9b01      	ldr	r3, [sp, #4]
 8001bde:	f000 813f 	beq.w	8001e60 <_malloc_r+0x51c>
 8001be2:	ebcb 0200 	rsb	r2, fp, r0
 8001be6:	444a      	add	r2, r9
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	f8c7 b008 	str.w	fp, [r7, #8]
 8001bf2:	4449      	add	r1, r9
 8001bf4:	42bc      	cmp	r4, r7
 8001bf6:	f8cb 2004 	str.w	r2, [fp, #4]
 8001bfa:	6019      	str	r1, [r3, #0]
 8001bfc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8001ca4 <_malloc_r+0x360>
 8001c00:	d016      	beq.n	8001c30 <_malloc_r+0x2ec>
 8001c02:	f1b8 0f0f 	cmp.w	r8, #15
 8001c06:	f240 80fd 	bls.w	8001e04 <_malloc_r+0x4c0>
 8001c0a:	6862      	ldr	r2, [r4, #4]
 8001c0c:	f1a8 030c 	sub.w	r3, r8, #12
 8001c10:	f023 0307 	bic.w	r3, r3, #7
 8001c14:	18e0      	adds	r0, r4, r3
 8001c16:	f002 0201 	and.w	r2, r2, #1
 8001c1a:	f04f 0e05 	mov.w	lr, #5
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	6062      	str	r2, [r4, #4]
 8001c24:	f8c0 e004 	str.w	lr, [r0, #4]
 8001c28:	f8c0 e008 	str.w	lr, [r0, #8]
 8001c2c:	f200 811c 	bhi.w	8001e68 <_malloc_r+0x524>
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <_malloc_r+0x364>)
 8001c32:	68bc      	ldr	r4, [r7, #8]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4291      	cmp	r1, r2
 8001c38:	bf88      	it	hi
 8001c3a:	6019      	strhi	r1, [r3, #0]
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <_malloc_r+0x368>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4291      	cmp	r1, r2
 8001c42:	6862      	ldr	r2, [r4, #4]
 8001c44:	bf88      	it	hi
 8001c46:	6019      	strhi	r1, [r3, #0]
 8001c48:	f022 0203 	bic.w	r2, r2, #3
 8001c4c:	4295      	cmp	r5, r2
 8001c4e:	eba2 0305 	sub.w	r3, r2, r5
 8001c52:	d801      	bhi.n	8001c58 <_malloc_r+0x314>
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	dc04      	bgt.n	8001c62 <_malloc_r+0x31e>
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f000 f92d 	bl	8001eb8 <__malloc_unlock>
 8001c5e:	2400      	movs	r4, #0
 8001c60:	e738      	b.n	8001ad4 <_malloc_r+0x190>
 8001c62:	1962      	adds	r2, r4, r5
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	f045 0501 	orr.w	r5, r5, #1
 8001c6c:	6065      	str	r5, [r4, #4]
 8001c6e:	4630      	mov	r0, r6
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	6053      	str	r3, [r2, #4]
 8001c74:	f000 f920 	bl	8001eb8 <__malloc_unlock>
 8001c78:	3408      	adds	r4, #8
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	b003      	add	sp, #12
 8001c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c82:	2b14      	cmp	r3, #20
 8001c84:	d971      	bls.n	8001d6a <_malloc_r+0x426>
 8001c86:	2b54      	cmp	r3, #84	; 0x54
 8001c88:	f200 80a4 	bhi.w	8001dd4 <_malloc_r+0x490>
 8001c8c:	0b28      	lsrs	r0, r5, #12
 8001c8e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8001c92:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001c96:	306e      	adds	r0, #110	; 0x6e
 8001c98:	e676      	b.n	8001988 <_malloc_r+0x44>
 8001c9a:	bf00      	nop
 8001c9c:	20000444 	.word	0x20000444
 8001ca0:	200008bc 	.word	0x200008bc
 8001ca4:	200008c0 	.word	0x200008c0
 8001ca8:	200008b8 	.word	0x200008b8
 8001cac:	200008b4 	.word	0x200008b4
 8001cb0:	20000850 	.word	0x20000850
 8001cb4:	0a5a      	lsrs	r2, r3, #9
 8001cb6:	2a04      	cmp	r2, #4
 8001cb8:	d95e      	bls.n	8001d78 <_malloc_r+0x434>
 8001cba:	2a14      	cmp	r2, #20
 8001cbc:	f200 80b3 	bhi.w	8001e26 <_malloc_r+0x4e2>
 8001cc0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8001cc4:	0049      	lsls	r1, r1, #1
 8001cc6:	325b      	adds	r2, #91	; 0x5b
 8001cc8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8001ccc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8001cd0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8001eb0 <_malloc_r+0x56c>
 8001cd4:	f1ac 0c08 	sub.w	ip, ip, #8
 8001cd8:	458c      	cmp	ip, r1
 8001cda:	f000 8088 	beq.w	8001dee <_malloc_r+0x4aa>
 8001cde:	684a      	ldr	r2, [r1, #4]
 8001ce0:	f022 0203 	bic.w	r2, r2, #3
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d202      	bcs.n	8001cee <_malloc_r+0x3aa>
 8001ce8:	6889      	ldr	r1, [r1, #8]
 8001cea:	458c      	cmp	ip, r1
 8001cec:	d1f7      	bne.n	8001cde <_malloc_r+0x39a>
 8001cee:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	f8c4 c00c 	str.w	ip, [r4, #12]
 8001cf8:	60a1      	str	r1, [r4, #8]
 8001cfa:	f8cc 4008 	str.w	r4, [ip, #8]
 8001cfe:	60cc      	str	r4, [r1, #12]
 8001d00:	e688      	b.n	8001a14 <_malloc_r+0xd0>
 8001d02:	1963      	adds	r3, r4, r5
 8001d04:	f042 0701 	orr.w	r7, r2, #1
 8001d08:	f045 0501 	orr.w	r5, r5, #1
 8001d0c:	6065      	str	r5, [r4, #4]
 8001d0e:	4630      	mov	r0, r6
 8001d10:	614b      	str	r3, [r1, #20]
 8001d12:	610b      	str	r3, [r1, #16]
 8001d14:	f8c3 e00c 	str.w	lr, [r3, #12]
 8001d18:	f8c3 e008 	str.w	lr, [r3, #8]
 8001d1c:	605f      	str	r7, [r3, #4]
 8001d1e:	509a      	str	r2, [r3, r2]
 8001d20:	3408      	adds	r4, #8
 8001d22:	f000 f8c9 	bl	8001eb8 <__malloc_unlock>
 8001d26:	e6d5      	b.n	8001ad4 <_malloc_r+0x190>
 8001d28:	684a      	ldr	r2, [r1, #4]
 8001d2a:	e673      	b.n	8001a14 <_malloc_r+0xd0>
 8001d2c:	f108 0801 	add.w	r8, r8, #1
 8001d30:	f018 0f03 	tst.w	r8, #3
 8001d34:	f10c 0c08 	add.w	ip, ip, #8
 8001d38:	f47f ae7f 	bne.w	8001a3a <_malloc_r+0xf6>
 8001d3c:	e030      	b.n	8001da0 <_malloc_r+0x45c>
 8001d3e:	68dc      	ldr	r4, [r3, #12]
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	bf08      	it	eq
 8001d44:	3002      	addeq	r0, #2
 8001d46:	f43f ae35 	beq.w	80019b4 <_malloc_r+0x70>
 8001d4a:	e6b3      	b.n	8001ab4 <_malloc_r+0x170>
 8001d4c:	440b      	add	r3, r1
 8001d4e:	460c      	mov	r4, r1
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	68c9      	ldr	r1, [r1, #12]
 8001d54:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	4630      	mov	r0, r6
 8001d60:	60e9      	str	r1, [r5, #12]
 8001d62:	608d      	str	r5, [r1, #8]
 8001d64:	f000 f8a8 	bl	8001eb8 <__malloc_unlock>
 8001d68:	e6b4      	b.n	8001ad4 <_malloc_r+0x190>
 8001d6a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8001d6e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8001d72:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001d76:	e607      	b.n	8001988 <_malloc_r+0x44>
 8001d78:	099a      	lsrs	r2, r3, #6
 8001d7a:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8001d7e:	0049      	lsls	r1, r1, #1
 8001d80:	3238      	adds	r2, #56	; 0x38
 8001d82:	e7a1      	b.n	8001cc8 <_malloc_r+0x384>
 8001d84:	42bc      	cmp	r4, r7
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <_malloc_r+0x56c>)
 8001d88:	f43f af00 	beq.w	8001b8c <_malloc_r+0x248>
 8001d8c:	689c      	ldr	r4, [r3, #8]
 8001d8e:	6862      	ldr	r2, [r4, #4]
 8001d90:	f022 0203 	bic.w	r2, r2, #3
 8001d94:	e75a      	b.n	8001c4c <_malloc_r+0x308>
 8001d96:	f859 3908 	ldr.w	r3, [r9], #-8
 8001d9a:	4599      	cmp	r9, r3
 8001d9c:	f040 8082 	bne.w	8001ea4 <_malloc_r+0x560>
 8001da0:	f010 0f03 	tst.w	r0, #3
 8001da4:	f100 30ff 	add.w	r0, r0, #4294967295
 8001da8:	d1f5      	bne.n	8001d96 <_malloc_r+0x452>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	ea23 0304 	bic.w	r3, r3, r4
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	0064      	lsls	r4, r4, #1
 8001db4:	429c      	cmp	r4, r3
 8001db6:	f63f aebd 	bhi.w	8001b34 <_malloc_r+0x1f0>
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	f43f aeba 	beq.w	8001b34 <_malloc_r+0x1f0>
 8001dc0:	421c      	tst	r4, r3
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	f47f ae35 	bne.w	8001a32 <_malloc_r+0xee>
 8001dc8:	0064      	lsls	r4, r4, #1
 8001dca:	421c      	tst	r4, r3
 8001dcc:	f100 0004 	add.w	r0, r0, #4
 8001dd0:	d0fa      	beq.n	8001dc8 <_malloc_r+0x484>
 8001dd2:	e62e      	b.n	8001a32 <_malloc_r+0xee>
 8001dd4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001dd8:	d818      	bhi.n	8001e0c <_malloc_r+0x4c8>
 8001dda:	0be8      	lsrs	r0, r5, #15
 8001ddc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8001de0:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001de4:	3077      	adds	r0, #119	; 0x77
 8001de6:	e5cf      	b.n	8001988 <_malloc_r+0x44>
 8001de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dec:	e6eb      	b.n	8001bc6 <_malloc_r+0x282>
 8001dee:	2101      	movs	r1, #1
 8001df0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001df4:	1092      	asrs	r2, r2, #2
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	f8c8 2004 	str.w	r2, [r8, #4]
 8001e00:	4661      	mov	r1, ip
 8001e02:	e777      	b.n	8001cf4 <_malloc_r+0x3b0>
 8001e04:	2301      	movs	r3, #1
 8001e06:	f8cb 3004 	str.w	r3, [fp, #4]
 8001e0a:	e725      	b.n	8001c58 <_malloc_r+0x314>
 8001e0c:	f240 5254 	movw	r2, #1364	; 0x554
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d820      	bhi.n	8001e56 <_malloc_r+0x512>
 8001e14:	0ca8      	lsrs	r0, r5, #18
 8001e16:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8001e1a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001e1e:	307c      	adds	r0, #124	; 0x7c
 8001e20:	e5b2      	b.n	8001988 <_malloc_r+0x44>
 8001e22:	3210      	adds	r2, #16
 8001e24:	e6a4      	b.n	8001b70 <_malloc_r+0x22c>
 8001e26:	2a54      	cmp	r2, #84	; 0x54
 8001e28:	d826      	bhi.n	8001e78 <_malloc_r+0x534>
 8001e2a:	0b1a      	lsrs	r2, r3, #12
 8001e2c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8001e30:	0049      	lsls	r1, r1, #1
 8001e32:	326e      	adds	r2, #110	; 0x6e
 8001e34:	e748      	b.n	8001cc8 <_malloc_r+0x384>
 8001e36:	68bc      	ldr	r4, [r7, #8]
 8001e38:	6862      	ldr	r2, [r4, #4]
 8001e3a:	f022 0203 	bic.w	r2, r2, #3
 8001e3e:	e705      	b.n	8001c4c <_malloc_r+0x308>
 8001e40:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8001e44:	2800      	cmp	r0, #0
 8001e46:	f47f aea8 	bne.w	8001b9a <_malloc_r+0x256>
 8001e4a:	4442      	add	r2, r8
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	e6ec      	b.n	8001c30 <_malloc_r+0x2ec>
 8001e56:	23fe      	movs	r3, #254	; 0xfe
 8001e58:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8001e5c:	207e      	movs	r0, #126	; 0x7e
 8001e5e:	e593      	b.n	8001988 <_malloc_r+0x44>
 8001e60:	2201      	movs	r2, #1
 8001e62:	f04f 0900 	mov.w	r9, #0
 8001e66:	e6c1      	b.n	8001bec <_malloc_r+0x2a8>
 8001e68:	f104 0108 	add.w	r1, r4, #8
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	f000 f885 	bl	8001f7c <_free_r>
 8001e72:	f8d9 1000 	ldr.w	r1, [r9]
 8001e76:	e6db      	b.n	8001c30 <_malloc_r+0x2ec>
 8001e78:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8001e7c:	d805      	bhi.n	8001e8a <_malloc_r+0x546>
 8001e7e:	0bda      	lsrs	r2, r3, #15
 8001e80:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8001e84:	0049      	lsls	r1, r1, #1
 8001e86:	3277      	adds	r2, #119	; 0x77
 8001e88:	e71e      	b.n	8001cc8 <_malloc_r+0x384>
 8001e8a:	f240 5154 	movw	r1, #1364	; 0x554
 8001e8e:	428a      	cmp	r2, r1
 8001e90:	d805      	bhi.n	8001e9e <_malloc_r+0x55a>
 8001e92:	0c9a      	lsrs	r2, r3, #18
 8001e94:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8001e98:	0049      	lsls	r1, r1, #1
 8001e9a:	327c      	adds	r2, #124	; 0x7c
 8001e9c:	e714      	b.n	8001cc8 <_malloc_r+0x384>
 8001e9e:	21fe      	movs	r1, #254	; 0xfe
 8001ea0:	227e      	movs	r2, #126	; 0x7e
 8001ea2:	e711      	b.n	8001cc8 <_malloc_r+0x384>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	e784      	b.n	8001db2 <_malloc_r+0x46e>
 8001ea8:	08e8      	lsrs	r0, r5, #3
 8001eaa:	1c43      	adds	r3, r0, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	e5f8      	b.n	8001aa2 <_malloc_r+0x15e>
 8001eb0:	20000444 	.word	0x20000444

08001eb4 <__malloc_lock>:
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <__malloc_unlock>:
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop

08001ebc <_sbrk_r>:
 8001ebc:	b538      	push	{r3, r4, r5, lr}
 8001ebe:	4c07      	ldr	r4, [pc, #28]	; (8001edc <_sbrk_r+0x20>)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	6023      	str	r3, [r4, #0]
 8001ec8:	f7fe fa3c 	bl	8000344 <_sbrk>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d000      	beq.n	8001ed2 <_sbrk_r+0x16>
 8001ed0:	bd38      	pop	{r3, r4, r5, pc}
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0fb      	beq.n	8001ed0 <_sbrk_r+0x14>
 8001ed8:	602b      	str	r3, [r5, #0]
 8001eda:	bd38      	pop	{r3, r4, r5, pc}
 8001edc:	20000904 	.word	0x20000904

08001ee0 <_malloc_trim_r>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	4f23      	ldr	r7, [pc, #140]	; (8001f70 <_malloc_trim_r+0x90>)
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	4606      	mov	r6, r0
 8001ee8:	f7ff ffe4 	bl	8001eb4 <__malloc_lock>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	685d      	ldr	r5, [r3, #4]
 8001ef0:	f025 0503 	bic.w	r5, r5, #3
 8001ef4:	1b29      	subs	r1, r5, r4
 8001ef6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8001efa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8001efe:	f021 010f 	bic.w	r1, r1, #15
 8001f02:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8001f06:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001f0a:	db07      	blt.n	8001f1c <_malloc_trim_r+0x3c>
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f7ff ffd4 	bl	8001ebc <_sbrk_r>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	442b      	add	r3, r5
 8001f18:	4298      	cmp	r0, r3
 8001f1a:	d004      	beq.n	8001f26 <_malloc_trim_r+0x46>
 8001f1c:	4630      	mov	r0, r6
 8001f1e:	f7ff ffcb 	bl	8001eb8 <__malloc_unlock>
 8001f22:	2000      	movs	r0, #0
 8001f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f26:	4261      	negs	r1, r4
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f7ff ffc7 	bl	8001ebc <_sbrk_r>
 8001f2e:	3001      	adds	r0, #1
 8001f30:	d00d      	beq.n	8001f4e <_malloc_trim_r+0x6e>
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_malloc_trim_r+0x94>)
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	1b2d      	subs	r5, r5, r4
 8001f3a:	f045 0501 	orr.w	r5, r5, #1
 8001f3e:	4630      	mov	r0, r6
 8001f40:	1b09      	subs	r1, r1, r4
 8001f42:	6055      	str	r5, [r2, #4]
 8001f44:	6019      	str	r1, [r3, #0]
 8001f46:	f7ff ffb7 	bl	8001eb8 <__malloc_unlock>
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4630      	mov	r0, r6
 8001f52:	f7ff ffb3 	bl	8001ebc <_sbrk_r>
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	1a83      	subs	r3, r0, r2
 8001f5a:	2b0f      	cmp	r3, #15
 8001f5c:	ddde      	ble.n	8001f1c <_malloc_trim_r+0x3c>
 8001f5e:	4c06      	ldr	r4, [pc, #24]	; (8001f78 <_malloc_trim_r+0x98>)
 8001f60:	4904      	ldr	r1, [pc, #16]	; (8001f74 <_malloc_trim_r+0x94>)
 8001f62:	6824      	ldr	r4, [r4, #0]
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	1b00      	subs	r0, r0, r4
 8001f6a:	6053      	str	r3, [r2, #4]
 8001f6c:	6008      	str	r0, [r1, #0]
 8001f6e:	e7d5      	b.n	8001f1c <_malloc_trim_r+0x3c>
 8001f70:	20000444 	.word	0x20000444
 8001f74:	200008c0 	.word	0x200008c0
 8001f78:	20000850 	.word	0x20000850

08001f7c <_free_r>:
 8001f7c:	2900      	cmp	r1, #0
 8001f7e:	d045      	beq.n	800200c <_free_r+0x90>
 8001f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f84:	460d      	mov	r5, r1
 8001f86:	4680      	mov	r8, r0
 8001f88:	f7ff ff94 	bl	8001eb4 <__malloc_lock>
 8001f8c:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8001f90:	496a      	ldr	r1, [pc, #424]	; (800213c <_free_r+0x1c0>)
 8001f92:	f027 0301 	bic.w	r3, r7, #1
 8001f96:	f1a5 0408 	sub.w	r4, r5, #8
 8001f9a:	18e2      	adds	r2, r4, r3
 8001f9c:	688e      	ldr	r6, [r1, #8]
 8001f9e:	6850      	ldr	r0, [r2, #4]
 8001fa0:	42b2      	cmp	r2, r6
 8001fa2:	f020 0003 	bic.w	r0, r0, #3
 8001fa6:	d062      	beq.n	800206e <_free_r+0xf2>
 8001fa8:	07fe      	lsls	r6, r7, #31
 8001faa:	6050      	str	r0, [r2, #4]
 8001fac:	d40b      	bmi.n	8001fc6 <_free_r+0x4a>
 8001fae:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8001fb2:	1be4      	subs	r4, r4, r7
 8001fb4:	f101 0e08 	add.w	lr, r1, #8
 8001fb8:	68a5      	ldr	r5, [r4, #8]
 8001fba:	4575      	cmp	r5, lr
 8001fbc:	443b      	add	r3, r7
 8001fbe:	d06f      	beq.n	80020a0 <_free_r+0x124>
 8001fc0:	68e7      	ldr	r7, [r4, #12]
 8001fc2:	60ef      	str	r7, [r5, #12]
 8001fc4:	60bd      	str	r5, [r7, #8]
 8001fc6:	1815      	adds	r5, r2, r0
 8001fc8:	686d      	ldr	r5, [r5, #4]
 8001fca:	07ed      	lsls	r5, r5, #31
 8001fcc:	d542      	bpl.n	8002054 <_free_r+0xd8>
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	6062      	str	r2, [r4, #4]
 8001fd4:	50e3      	str	r3, [r4, r3]
 8001fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fda:	d218      	bcs.n	800200e <_free_r+0x92>
 8001fdc:	08db      	lsrs	r3, r3, #3
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	684d      	ldr	r5, [r1, #4]
 8001fe2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8001fe6:	60a7      	str	r7, [r4, #8]
 8001fe8:	2001      	movs	r0, #1
 8001fea:	109b      	asrs	r3, r3, #2
 8001fec:	fa00 f303 	lsl.w	r3, r0, r3
 8001ff0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8001ff4:	431d      	orrs	r5, r3
 8001ff6:	3808      	subs	r0, #8
 8001ff8:	60e0      	str	r0, [r4, #12]
 8001ffa:	604d      	str	r5, [r1, #4]
 8001ffc:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8002000:	60fc      	str	r4, [r7, #12]
 8002002:	4640      	mov	r0, r8
 8002004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002008:	f7ff bf56 	b.w	8001eb8 <__malloc_unlock>
 800200c:	4770      	bx	lr
 800200e:	0a5a      	lsrs	r2, r3, #9
 8002010:	2a04      	cmp	r2, #4
 8002012:	d853      	bhi.n	80020bc <_free_r+0x140>
 8002014:	099a      	lsrs	r2, r3, #6
 8002016:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800201a:	007f      	lsls	r7, r7, #1
 800201c:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8002020:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8002024:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8002028:	4944      	ldr	r1, [pc, #272]	; (800213c <_free_r+0x1c0>)
 800202a:	3808      	subs	r0, #8
 800202c:	4290      	cmp	r0, r2
 800202e:	d04d      	beq.n	80020cc <_free_r+0x150>
 8002030:	6851      	ldr	r1, [r2, #4]
 8002032:	f021 0103 	bic.w	r1, r1, #3
 8002036:	428b      	cmp	r3, r1
 8002038:	d202      	bcs.n	8002040 <_free_r+0xc4>
 800203a:	6892      	ldr	r2, [r2, #8]
 800203c:	4290      	cmp	r0, r2
 800203e:	d1f7      	bne.n	8002030 <_free_r+0xb4>
 8002040:	68d0      	ldr	r0, [r2, #12]
 8002042:	60e0      	str	r0, [r4, #12]
 8002044:	60a2      	str	r2, [r4, #8]
 8002046:	6084      	str	r4, [r0, #8]
 8002048:	60d4      	str	r4, [r2, #12]
 800204a:	4640      	mov	r0, r8
 800204c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002050:	f7ff bf32 	b.w	8001eb8 <__malloc_unlock>
 8002054:	6895      	ldr	r5, [r2, #8]
 8002056:	4f3a      	ldr	r7, [pc, #232]	; (8002140 <_free_r+0x1c4>)
 8002058:	42bd      	cmp	r5, r7
 800205a:	4403      	add	r3, r0
 800205c:	d03f      	beq.n	80020de <_free_r+0x162>
 800205e:	68d0      	ldr	r0, [r2, #12]
 8002060:	60e8      	str	r0, [r5, #12]
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	6085      	str	r5, [r0, #8]
 8002068:	6062      	str	r2, [r4, #4]
 800206a:	50e3      	str	r3, [r4, r3]
 800206c:	e7b3      	b.n	8001fd6 <_free_r+0x5a>
 800206e:	07ff      	lsls	r7, r7, #31
 8002070:	4403      	add	r3, r0
 8002072:	d407      	bmi.n	8002084 <_free_r+0x108>
 8002074:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8002078:	1aa4      	subs	r4, r4, r2
 800207a:	4413      	add	r3, r2
 800207c:	68a0      	ldr	r0, [r4, #8]
 800207e:	68e2      	ldr	r2, [r4, #12]
 8002080:	60c2      	str	r2, [r0, #12]
 8002082:	6090      	str	r0, [r2, #8]
 8002084:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <_free_r+0x1c8>)
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	f043 0001 	orr.w	r0, r3, #1
 800208c:	4293      	cmp	r3, r2
 800208e:	6060      	str	r0, [r4, #4]
 8002090:	608c      	str	r4, [r1, #8]
 8002092:	d3b6      	bcc.n	8002002 <_free_r+0x86>
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <_free_r+0x1cc>)
 8002096:	4640      	mov	r0, r8
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	f7ff ff21 	bl	8001ee0 <_malloc_trim_r>
 800209e:	e7b0      	b.n	8002002 <_free_r+0x86>
 80020a0:	1811      	adds	r1, r2, r0
 80020a2:	6849      	ldr	r1, [r1, #4]
 80020a4:	07c9      	lsls	r1, r1, #31
 80020a6:	d444      	bmi.n	8002132 <_free_r+0x1b6>
 80020a8:	6891      	ldr	r1, [r2, #8]
 80020aa:	68d2      	ldr	r2, [r2, #12]
 80020ac:	60ca      	str	r2, [r1, #12]
 80020ae:	4403      	add	r3, r0
 80020b0:	f043 0001 	orr.w	r0, r3, #1
 80020b4:	6091      	str	r1, [r2, #8]
 80020b6:	6060      	str	r0, [r4, #4]
 80020b8:	50e3      	str	r3, [r4, r3]
 80020ba:	e7a2      	b.n	8002002 <_free_r+0x86>
 80020bc:	2a14      	cmp	r2, #20
 80020be:	d817      	bhi.n	80020f0 <_free_r+0x174>
 80020c0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80020c4:	007f      	lsls	r7, r7, #1
 80020c6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80020ca:	e7a9      	b.n	8002020 <_free_r+0xa4>
 80020cc:	10aa      	asrs	r2, r5, #2
 80020ce:	684b      	ldr	r3, [r1, #4]
 80020d0:	2501      	movs	r5, #1
 80020d2:	fa05 f202 	lsl.w	r2, r5, r2
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
 80020da:	4602      	mov	r2, r0
 80020dc:	e7b1      	b.n	8002042 <_free_r+0xc6>
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	614c      	str	r4, [r1, #20]
 80020e4:	610c      	str	r4, [r1, #16]
 80020e6:	60e5      	str	r5, [r4, #12]
 80020e8:	60a5      	str	r5, [r4, #8]
 80020ea:	6062      	str	r2, [r4, #4]
 80020ec:	50e3      	str	r3, [r4, r3]
 80020ee:	e788      	b.n	8002002 <_free_r+0x86>
 80020f0:	2a54      	cmp	r2, #84	; 0x54
 80020f2:	d806      	bhi.n	8002102 <_free_r+0x186>
 80020f4:	0b1a      	lsrs	r2, r3, #12
 80020f6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80020fa:	007f      	lsls	r7, r7, #1
 80020fc:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8002100:	e78e      	b.n	8002020 <_free_r+0xa4>
 8002102:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002106:	d806      	bhi.n	8002116 <_free_r+0x19a>
 8002108:	0bda      	lsrs	r2, r3, #15
 800210a:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800210e:	007f      	lsls	r7, r7, #1
 8002110:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8002114:	e784      	b.n	8002020 <_free_r+0xa4>
 8002116:	f240 5054 	movw	r0, #1364	; 0x554
 800211a:	4282      	cmp	r2, r0
 800211c:	d806      	bhi.n	800212c <_free_r+0x1b0>
 800211e:	0c9a      	lsrs	r2, r3, #18
 8002120:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8002124:	007f      	lsls	r7, r7, #1
 8002126:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 800212a:	e779      	b.n	8002020 <_free_r+0xa4>
 800212c:	27fe      	movs	r7, #254	; 0xfe
 800212e:	257e      	movs	r5, #126	; 0x7e
 8002130:	e776      	b.n	8002020 <_free_r+0xa4>
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	6062      	str	r2, [r4, #4]
 8002138:	50e3      	str	r3, [r4, r3]
 800213a:	e762      	b.n	8002002 <_free_r+0x86>
 800213c:	20000444 	.word	0x20000444
 8002140:	2000044c 	.word	0x2000044c
 8002144:	2000084c 	.word	0x2000084c
 8002148:	200008bc 	.word	0x200008bc

0800214c <_init>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	bf00      	nop
 8002150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002152:	bc08      	pop	{r3}
 8002154:	469e      	mov	lr, r3
 8002156:	4770      	bx	lr

08002158 <_fini>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	bf00      	nop
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr
